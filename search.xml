<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>R速查表</title>
    <url>/2020/01/22/R%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<font size="3">
R 各种速查表, Cheat Sheet。

<a id="more"></a>
<hr>
<h1 id="1-R-基础"><a href="#1-R-基础" class="headerlink" title="1. R 基础"></a>1. R 基础</h1><h2 id="R-basic"><a href="#R-basic" class="headerlink" title="R basic"></a>R basic</h2><div class="pdf" target="./base-r.pdf" height></div>

<h2 id="R-advanced"><a href="#R-advanced" class="headerlink" title="R advanced"></a>R advanced</h2><div class="pdf" target="./advancedR.pdf" height></div>  

<h2 id="Regular-expressions"><a href="#Regular-expressions" class="headerlink" title="Regular expressions"></a>Regular expressions</h2><div class="pdf" target="./regex.pdf" height></div>

<h2 id="R-Markdown"><a href="#R-Markdown" class="headerlink" title="R Markdown"></a>R Markdown</h2><div class="pdf" target="./rmarkdown-2.0.pdf" height></div> 

<h2 id="Use-Python-in-R"><a href="#Use-Python-in-R" class="headerlink" title="Use Python in R"></a>Use Python in R</h2><div class="pdf" target="./reticulate.pdf" height></div> 

<h1 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2. 数据处理"></a>2. 数据处理</h1><h2 id="Data-import"><a href="#Data-import" class="headerlink" title="Data import"></a>Data import</h2><div class="pdf" target="./data-import.pdf" height></div>

<h2 id="dplyr"><a href="#dplyr" class="headerlink" title="dplyr"></a>dplyr</h2><div class="pdf" target="./dplyr.pdf" height></div> 

<h2 id="Data-transformation"><a href="#Data-transformation" class="headerlink" title="Data transformation"></a>Data transformation</h2><div class="pdf" target="./data-transformation.pdf" height></div> 

<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><div class="pdf" target="./strings.pdf" height></div>

<h2 id="Factors"><a href="#Factors" class="headerlink" title="Factors"></a>Factors</h2><div class="pdf" target="./factors.pdf" height></div>  

<h2 id="Dates-and-times-with-lubridate"><a href="#Dates-and-times-with-lubridate" class="headerlink" title="Dates and times with lubridate"></a>Dates and times with lubridate</h2><div class="pdf" target="./lubridate.pdf" height></div>

<h2 id="Apply-functions-with-purrr"><a href="#Apply-functions-with-purrr" class="headerlink" title="Apply functions with purrr"></a>Apply functions with purrr</h2><div class="pdf" target="./purrr.pdf" height></div>

<h2 id="Data-Science-in-Spark-with-sparklyr"><a href="#Data-Science-in-Spark-with-sparklyr" class="headerlink" title="Data Science in Spark with sparklyr"></a>Data Science in Spark with sparklyr</h2><div class="pdf" target="./sparklyr.pdf" height></div>


<h1 id="3-数据可视化"><a href="#3-数据可视化" class="headerlink" title="3. 数据可视化"></a>3. 数据可视化</h1><h2 id="ggplot2"><a href="#ggplot2" class="headerlink" title="ggplot2"></a>ggplot2</h2><div class="pdf" target="./ggplot2.pdf" height></div>

<h2 id="Thematic-maps-with-cartography"><a href="#Thematic-maps-with-cartography" class="headerlink" title="Thematic maps with cartography"></a>Thematic maps with cartography</h2><div class="pdf" target="./cartography.pdf" height></div>

<h1 id="4-机器学习"><a href="#4-机器学习" class="headerlink" title="4. 机器学习"></a>4. 机器学习</h1><h2 id="R-自带"><a href="#R-自带" class="headerlink" title="R 自带"></a>R 自带</h2><div class="pdf" target="./Machine" height="Learning"></div>

<h2 id="caret-Classification-And-REgression-Training"><a href="#caret-Classification-And-REgression-Training" class="headerlink" title="caret(Classification And REgression Training)"></a>caret(Classification And REgression Training)</h2><div class="pdf" target="./caret(Classification" height="And"></div>

<h2 id="Deep-Learning-with-Keras"><a href="#Deep-Learning-with-Keras" class="headerlink" title="Deep Learning with Keras"></a>Deep Learning with Keras</h2><div class="pdf" target="./keras.pdf" height></div>

<h2 id="Time-series"><a href="#Time-series" class="headerlink" title="Time series"></a>Time series</h2><div class="pdf" target="./time-series.pdf" height></div>  
<h1 id="来源以及最后"><a href="#来源以及最后" class="headerlink" title="来源以及最后"></a>来源以及最后</h1><ol>
<li><a href="https://rstudio.com/resources/cheatsheets/" target="_blank" rel="noopener">https://rstudio.com/resources/cheatsheets/</a></li>
<li>大家有好的Cheat sheet欢迎留言补充</li>
</ol>
</font>]]></content>
      <categories>
        <category>R学习</category>
      </categories>
      <tags>
        <tag>速查表</tag>
      </tags>
  </entry>
  <entry>
    <title>Python速查表</title>
    <url>/2020/01/22/Python%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<font size="3">
Python 各种速查表,Cheat Sheet。

<a id="more"></a>
<hr>
<h1 id="1-Python-基础"><a href="#1-Python-基础" class="headerlink" title="1. Python 基础"></a>1. Python 基础</h1><h2 id="Python-basic"><a href="#Python-basic" class="headerlink" title="Python basic"></a>Python basic</h2><div class="pdf" target="./Python_basic.pdf" height></div>

<h2 id="Python-classes"><a href="#Python-classes" class="headerlink" title="Python classes"></a>Python classes</h2><div class="pdf" target="./Python_classes.pdf" height></div>  

<h2 id="Python-dictionaries"><a href="#Python-dictionaries" class="headerlink" title="Python dictionaries"></a>Python dictionaries</h2><div class="pdf" target="./Python_dictionaries.pdf" height></div>  

<h2 id="Python-lists"><a href="#Python-lists" class="headerlink" title="Python lists"></a>Python lists</h2><div class="pdf" target="./Python_lists.pdf" height></div>  

<h2 id="Python-functions"><a href="#Python-functions" class="headerlink" title="Python functions"></a>Python functions</h2><div class="pdf" target="./Python_functions.pdf" height></div>

<h2 id="Python-if-and-while"><a href="#Python-if-and-while" class="headerlink" title="Python if and while"></a>Python if and while</h2><div class="pdf" target="./Python_if_while.pdf" height></div> 

<h2 id="Python-regular-expressions"><a href="#Python-regular-expressions" class="headerlink" title="Python regular expressions"></a>Python regular expressions</h2><div class="pdf" target="./python_regular_expressions" height></div> 

<h2 id="Python-read-files"><a href="#Python-read-files" class="headerlink" title="Python read files"></a>Python read files</h2><div class="pdf" target="./Python_files_exceptions.pdf" height></div>  

<h1 id="2-Python-各种包"><a href="#2-Python-各种包" class="headerlink" title="2. Python 各种包"></a>2. Python 各种包</h1><h2 id="1-Numpy"><a href="#1-Numpy" class="headerlink" title="1. Numpy"></a>1. Numpy</h2><div class="pdf" target="./Numpy.pdf" height></div>  

<h2 id="2-Pandas"><a href="#2-Pandas" class="headerlink" title="2. Pandas"></a>2. Pandas</h2><div class="pdf" target="./Pandas.pdf" height></div>  

<h2 id="3-Matplotlib"><a href="#3-Matplotlib" class="headerlink" title="3. Matplotlib"></a>3. Matplotlib</h2><div class="pdf" target="./Matplotlib.pdf" height></div>  

<h2 id="4-Seaborn"><a href="#4-Seaborn" class="headerlink" title="4. Seaborn"></a>4. Seaborn</h2><div class="pdf" target="./Seaborn.pdf" height></div>  

<h2 id="5-Scikit-learn"><a href="#5-Scikit-learn" class="headerlink" title="5. Scikit-learn"></a>5. Scikit-learn</h2><div class="pdf" target="./Sklearn.pdf" height></div> 

<p><img src="/2020/01/22/Python%E9%80%9F%E6%9F%A5%E8%A1%A8/1.png" alt="sklearn"></p>
<h2 id="6-Pytorch"><a href="#6-Pytorch" class="headerlink" title="6. Pytorch"></a>6. Pytorch</h2><p>官方文档: <a href="https://pytorch.org/tutorials/beginner/ptcheat.html" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/ptcheat.html</a></p>
<h1 id="来源以及最后"><a href="#来源以及最后" class="headerlink" title="来源以及最后"></a>来源以及最后</h1><ol>
<li><a href="https://ehmatthes.github.io/pcc_2e/cheat_sheets/cheat_sheets/" target="_blank" rel="noopener">https://ehmatthes.github.io/pcc_2e/cheat_sheets/cheat_sheets/</a></li>
<li><a href="https://www.datacamp.com/community/data-science-cheatsheets" target="_blank" rel="noopener">https://www.datacamp.com/community/data-science-cheatsheets</a></li>
<li><a href="https://www.dataquest.io/blog/regex-cheatsheet/" target="_blank" rel="noopener">https://www.dataquest.io/blog/regex-cheatsheet/</a></li>
<li>一个很好的python基础速查表: <a href="https://github.com/crazyguitar/pysheeet" target="_blank" rel="noopener">https://github.com/crazyguitar/pysheeet</a> </li>
<li>大家有好的Cheat sheet欢迎留言补充</li>
</ol>
</font>]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>速查表</tag>
      </tags>
  </entry>
  <entry>
    <title>基于python的基金定投分析</title>
    <url>/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<font size="3">
使用python可视化分析基金定投和普通投资之间的区别和优缺点。探讨基金定投的降低风险作用。

<a id="more"></a>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h2 id="爬取东方财富网关于基金的数据并处理数据"><a href="#爬取东方财富网关于基金的数据并处理数据" class="headerlink" title="爬取东方财富网关于基金的数据并处理数据"></a>爬取东方财富网关于基金的数据并处理数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">link=<span class="string">"http://fund.eastmoney.com/f10/F10DataApi.aspx?type=lsjz&amp;code=000311&amp;page=1&amp;sdate=2018-01-02&amp;edate=2020-01-10&amp;per=20"</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(link,headers=headers)</span><br><span class="line"></span><br><span class="line">s1 = requests.get(link)</span><br><span class="line">s1.encoding = <span class="string">'utf-8'</span></span><br><span class="line">soup1=BeautifulSoup(s1.text,<span class="string">'lxml'</span>)</span><br><span class="line">fund_detail=soup1.find_all(<span class="string">'tr'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###获取总页数</span></span><br><span class="line">pattern=re.compile(<span class="string">r'pages:(.*),'</span>)</span><br><span class="line">html=r.text</span><br><span class="line">result=re.search(pattern,html).group(<span class="number">1</span>)</span><br><span class="line">pages=int(result)</span><br><span class="line">pages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">    link=<span class="string">'http://fund.eastmoney.com/f10/F10DataApi.aspx?type=lsjz&amp;code=000311&amp;page='</span>+str(i)+<span class="string">'&amp;sdate=2018-01-02&amp;edate=2020-01-10&amp;per=20'</span></span><br><span class="line">    r=requests.get(link,headers=headers)</span><br><span class="line">    s1 = requests.get(link)</span><br><span class="line">    s1.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    soup1=BeautifulSoup(s1.text,<span class="string">'lxml'</span>)</span><br><span class="line">    fund_detail=soup1.find_all(<span class="string">'tr'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> fund_detail:</span><br><span class="line">       <span class="keyword">if</span> each.td <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">        date=each.td.text.strip()<span class="comment">##only first td</span></span><br><span class="line">        unit_value=each.find(<span class="string">'td'</span>,class_=<span class="string">'tor bold'</span>).text.strip()<span class="comment">##first tor bold</span></span><br><span class="line">        cum_value=each.find(<span class="string">'td'</span>,class_=<span class="string">'tor bold'</span>).next_sibling.text.strip()<span class="comment">##second td</span></span><br><span class="line">        percent=each.find(<span class="string">'td'</span>).next_sibling.next_sibling.next_sibling.text.strip()</span><br><span class="line">        purchase_condition=each.find(<span class="string">'td'</span>).next_sibling.next_sibling.next_sibling.next_sibling.text.strip()</span><br><span class="line">        sale_condition=each.find(<span class="string">'td'</span>).next_sibling.next_sibling.next_sibling.next_sibling.next_sibling.text.strip()</span><br><span class="line">        dividend=each.find(<span class="string">'td'</span>,class_=<span class="string">'red unbold'</span>).text.strip()</span><br><span class="line">        code= <span class="string">'000311'</span></span><br><span class="line">        name=  <span class="string">'景顺长城沪深300增强'</span></span><br><span class="line">        data_list.append([code, name, date,unit_value, cum_value, percent,purchase_condition, sale_condition, dividend])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">len(data_list)</span><br></pre></td></tr></table></figure>




<pre><code>497</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fund_000311 = pd.DataFrame(data_list)<span class="comment"># 设置列名</span></span><br><span class="line">fund_000311.columns=[<span class="string">'代码'</span>,<span class="string">'名字'</span>,<span class="string">'时间'</span>,<span class="string">'单位净值'</span>,<span class="string">'累计净值'</span>,<span class="string">'涨跌幅'</span>,<span class="string">'申购'</span>,<span class="string">'赎回'</span>,<span class="string">'分红'</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fund_000311.to_csv(<span class="string">"data0003111"</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fund_000311.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>代码</th>
      <th>名字</th>
      <th>时间</th>
      <th>单位净值</th>
      <th>累计净值</th>
      <th>涨跌幅</th>
      <th>申购</th>
      <th>赎回</th>
      <th>分红</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>000311</td>
      <td>景顺长城沪深300增强</td>
      <td>2020-01-10</td>
      <td>2.2260</td>
      <td>2.5660</td>
      <td>0.32%</td>
      <td>开放申购</td>
      <td>开放赎回</td>
      <td></td>
    </tr>
    <tr>
      <th>1</th>
      <td>000311</td>
      <td>景顺长城沪深300增强</td>
      <td>2020-01-09</td>
      <td>2.2190</td>
      <td>2.5590</td>
      <td>1.46%</td>
      <td>开放申购</td>
      <td>开放赎回</td>
      <td></td>
    </tr>
    <tr>
      <th>2</th>
      <td>000311</td>
      <td>景顺长城沪深300增强</td>
      <td>2020-01-08</td>
      <td>2.1870</td>
      <td>2.5270</td>
      <td>-1.44%</td>
      <td>开放申购</td>
      <td>开放赎回</td>
      <td></td>
    </tr>
    <tr>
      <th>3</th>
      <td>000311</td>
      <td>景顺长城沪深300增强</td>
      <td>2020-01-07</td>
      <td>2.2190</td>
      <td>2.5590</td>
      <td>0.91%</td>
      <td>开放申购</td>
      <td>开放赎回</td>
      <td></td>
    </tr>
    <tr>
      <th>4</th>
      <td>000311</td>
      <td>景顺长城沪深300增强</td>
      <td>2020-01-06</td>
      <td>2.1990</td>
      <td>2.5390</td>
      <td>-0.36%</td>
      <td>开放申购</td>
      <td>开放赎回</td>
      <td></td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##画出走势图(累计净值),共1328个交易日,累计净值=单位净值+累计分红</span></span><br><span class="line">cum_price=fund_000311[[<span class="string">'单位净值'</span>]]</span><br><span class="line">cum_price=np.array(cum_price)</span><br><span class="line">cum_price=cum_price.tolist()</span><br><span class="line">cum_value=list()</span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">497.0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> reversed(cum_price):<span class="comment">##倒序 从头开始</span></span><br><span class="line"> cum_price=float(*each)</span><br><span class="line"> cum_value.append(cum_price)</span><br><span class="line">plt.plot(t,cum_value,<span class="string">'r-'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'value'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time'</span>) </span><br><span class="line">plt.title(<span class="string">'Fund 000311 HuSheng 300 '</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &apos;Fund 000311 HuSheng 300 &apos;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_6_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##涨跌情况</span></span><br><span class="line">percent=fund_000311[[<span class="string">'涨跌幅'</span>]]</span><br><span class="line">percent=np.array(percent)</span><br><span class="line">percent=percent.tolist()</span><br><span class="line"><span class="keyword">while</span> [<span class="string">''</span>] <span class="keyword">in</span> percent:</span><br><span class="line"> percent.remove([<span class="string">''</span>])<span class="comment">#去除三个空白值</span></span><br><span class="line">percent_val=[]</span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">494.0</span>, <span class="number">1</span>)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> reversed(percent):<span class="comment">##倒序 从头开始</span></span><br><span class="line">   each=float(str(*each).strip(<span class="string">'%'</span>))</span><br><span class="line">   percent_val.append(each)</span><br><span class="line">   i=i+<span class="number">1</span>  </span><br><span class="line">plt.plot(t,percent_val,<span class="string">'r-'</span>,linewidth=<span class="number">0.5</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ratio(%)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time'</span>) </span><br><span class="line">plt.title(<span class="string">'Fund 000311 HuSheng 300 '</span>)</span><br><span class="line"><span class="comment">##可以看到在第二百到第三百个交易日波动率明显变大,400到500明显波动率小。</span></span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &apos;Fund 000311 HuSheng 300 &apos;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_7_1.png" alt="png"></p>
<h2 id="基金定投研究"><a href="#基金定投研究" class="headerlink" title="基金定投研究"></a>基金定投研究</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unit_price=fund_000311[[<span class="string">'单位净值'</span>]]</span><br><span class="line">unit_price=np.array(unit_price)</span><br><span class="line">unit_price=unit_price.tolist()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查出分红情况</span></span><br><span class="line">dividend=fund_000311.loc[fund_000311[<span class="string">'分红'</span>] != <span class="string">''</span>]</span><br><span class="line">dividend <span class="comment"># 期间无分红</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>代码</th>
      <th>名字</th>
      <th>时间</th>
      <th>单位净值</th>
      <th>累计净值</th>
      <th>涨跌幅</th>
      <th>申购</th>
      <th>赎回</th>
      <th>分红</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>



<h4 id="1-简单情况一次买入"><a href="#1-简单情况一次买入" class="headerlink" title="1. 简单情况一次买入"></a>1. 简单情况一次买入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算年化收益</span></span><br><span class="line"></span><br><span class="line">total_yearly_once = []</span><br><span class="line">unit_price_new = unit_price[<span class="number">50</span>:<span class="number">494</span>] <span class="comment"># 避免投资时间太短不考虑近50个交易日</span></span><br><span class="line">dayday = <span class="number">497</span> <span class="comment"># 投资时长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(unit_price_new):</span><br><span class="line"> i=float(*i)</span><br><span class="line"> pie=<span class="number">1000</span>/i <span class="comment">##份额</span></span><br><span class="line"> temp = pie*<span class="number">2.226</span> <span class="comment"># 2.226 20年1月10日</span></span><br><span class="line"> total_return = (temp<span class="number">-1000</span>)/<span class="number">1000</span></span><br><span class="line"> yearly_return = total_return/dayday*<span class="number">250</span> <span class="comment"># 250个交易日</span></span><br><span class="line"> total_yearly_once.append(yearly_return)</span><br><span class="line"> dayday = dayday - <span class="number">1</span></span><br><span class="line">total_yearly_once_df=pd.DataFrame(total_yearly_once)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 画图</span></span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">444.0</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(t,total_yearly_once_df,<span class="string">'r-'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ratio(%)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time'</span>) </span><br><span class="line">plt.title(<span class="string">'Fund 000311 normal investment '</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &apos;Fund 000311 normal investment &apos;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_13_1.png" alt="png"></p>
<p>可以看到收益率的波动率在这段期间非常的大,大致从0到将近60%,并且存在负收益率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.hist(total_yearly_once, bins=<span class="number">5</span>,facecolor=<span class="string">"red"</span>, edgecolor=<span class="string">"black"</span>, alpha=<span class="number">0.7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([101., 110., 124.,  78.,  31.]),
 array([-0.02019805,  0.09804444,  0.21628694,  0.33452944,  0.45277193,
         0.57101443]),
 &lt;a list of 5 Patch objects&gt;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_15_1.png" alt="png"></p>
<ol start="2">
<li>定投简单情况(不考虑时间价值)automatic investment plan</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算年化收益</span></span><br><span class="line">total_yearly_auto = []</span><br><span class="line">times= np.arange(<span class="number">494</span>, <span class="number">50</span>, <span class="number">-1</span>)</span><br><span class="line">dayday = <span class="number">497</span> <span class="comment"># 投资时长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> times:</span><br><span class="line">    unit_price_new = unit_price[<span class="number">50</span>:i+<span class="number">1</span>] <span class="comment"># 避免投资时间太短不考虑近50个交易日</span></span><br><span class="line">    each_pie=[]</span><br><span class="line">    each_amount=<span class="number">1000</span>/(len(unit_price_new)) <span class="comment"># 每笔投资多少</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> (unit_price_new):</span><br><span class="line">        each=float(*each)</span><br><span class="line">        pie=each_amount/each</span><br><span class="line">        each_pie.append(pie)</span><br><span class="line">    total_return=(sum(each_pie)*<span class="number">2.226</span><span class="number">-1000</span>)/<span class="number">1000</span></span><br><span class="line">    yearly_return = total_return/dayday*<span class="number">250</span></span><br><span class="line">    total_yearly_auto.append(yearly_return)</span><br><span class="line">    dayday = dayday - <span class="number">1</span></span><br><span class="line">total_yearly_auto_df=pd.DataFrame(total_yearly_auto)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">444.0</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(t,total_yearly_auto_df,<span class="string">'b-'</span>, label=<span class="string">'auto'</span>)</span><br><span class="line">plt.plot(t,total_yearly_once_df,<span class="string">'r-'</span>, label=<span class="string">'normal'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ratio(%)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time'</span>) </span><br><span class="line">plt.title(<span class="string">'Fund 000311 auto investment'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &apos;Fund 000311 auto investment&apos;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_18_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.hist(total_yearly_once, bins=<span class="number">10</span>,facecolor=<span class="string">"red"</span>, edgecolor=<span class="string">"black"</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.hist(total_yearly_auto, bins=<span class="number">10</span>,facecolor=<span class="string">"blue"</span>, edgecolor=<span class="string">"black"</span>, alpha=<span class="number">0.7</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([ 52., 107., 148., 108.,   6.,  12.,   2.,   5.,   2.,   2.]),
 array([0.07401984, 0.09161269, 0.10920555, 0.1267984 , 0.14439126,
        0.16198411, 0.17957697, 0.19716982, 0.21476267, 0.23235553,
        0.24994838]),
 &lt;a list of 10 Patch objects&gt;)</code></pre><p><img src="/2020/01/21/%E5%9F%BA%E4%BA%8Epython%E7%9A%84%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E5%88%86%E6%9E%90/output_19_1.png" alt="png"></p>
<p>通过画图可以看出,定投具有更小的收益率波动性,因此也具有更小的风险。收益率大致在10%到15%之间,没有负收益率。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看出定投具有所谓的“削峰填谷”的作用, 可以达到随时买入而年化收益波动不大的效果。而普通投资的收益率不稳定,可能一下子“暴富”也可能“白忙活”,需要投资者掌握投资时机。定投对于想要稳定增值资产的投资者是一个相对比较好的选择。</p>
<p> 最后项目在GitHub上网址:<a href="https://github.com/JasonVictor17/Stock-market-analysis" target="_blank" rel="noopener">https://github.com/JasonVictor17/Stock-market-analysis</a></p>
</font>]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>金融股市</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设6-主题的配置Next</title>
    <url>/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/</url>
    <content><![CDATA[<font size="3">
个人博客建设第六步:本篇介绍如何配置Next主题,使其更加个性化,其他主题的配置其实也大同小异可以参考,这篇也是本教程的最后一篇,以后可能会更新更多关于博客建设的内容。

<a id="more"></a>
<hr>
<p>首先我们找到主题文件夹Next里的配置文件,对,就是那个和站点配置文件一样名字的_config.yml。 打开会发现里面有几百行。。。不过没关系我会介绍最主要的几个配置。其他就留给大家自行探索了。 </p>
<h3 id="1-菜单栏"><a href="#1-菜单栏" class="headerlink" title="1. 菜单栏"></a>1. 菜单栏</h3><p>看我的博客可以看见有很多标签和分类,但是初始状态是没有的,我们需要配置。<br>首先我们找到menu 栏,把tags(标签),Categories(分类)或者其他需要的标签前的#号删除,表面我们使用这行代码</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/1.png" alt="peizhi">  </p>
<p>保存后我们在博客主目录下输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>我们就会在source文件夹内发现生成了一个tags的文件夹,打开里面的index.md文件按照如下设置</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/2.png" alt="peizhi"> </p>
<p> 然后保存就行了,其他的标签也是类似操作就不赘述了。之后我们在写文章时候按照如下格式写开头:</p>
<p> <img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/3.png" alt="peizhi">  </p>
<p>就可以自动生成标签和分类了。每一次有新的标签和分类都会自动在网页生成,方便快捷~(自动保存在public文件夹内)</p>
<h3 id="2-语言"><a href="#2-语言" class="headerlink" title="2.语言"></a>2.语言</h3><p> 在站点配置文件中填写: language: ‘zh-CN’就可以设置中文了,其他语言参考如下:</p>
<p> <img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/4.png" alt="peizhi"></p>
<h3 id="3-添加搜索功能"><a href="#3-添加搜索功能" class="headerlink" title="3. 添加搜索功能"></a>3. 添加搜索功能</h3><p>首先在博客根目录安装插件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在站点配置文件最后加上:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>最后在主题配置文件中:找到 local_search 改为true(在vs code中可以使用搜索找到该参数)<br>这样部署一下博客内搜索功能就上线了。</p>
<h3 id="4-设置作者昵称和站点介绍等"><a href="#4-设置作者昵称和站点介绍等" class="headerlink" title="4.设置作者昵称和站点介绍等"></a>4.设置作者昵称和站点介绍等</h3><p>打开站点配置文件,第一项里进行编辑,title,author和description等</p>
<h3 id="5-修改favicon图标"><a href="#5-修改favicon图标" class="headerlink" title="5. 修改favicon图标"></a>5. 修改favicon图标</h3><p>也就是网页的图标,我的博客是一只手工画的小老鼠。<br>使用工具将需要的图片裁剪成16<em>16和32</em>32大小,然后打开next文件夹下的source文件夹,再打开images文件夹将图片保存其中。<br>打开主题配置文件找到favicon,如下输入自己文件名字:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;mouse16.ico</span><br><span class="line">  medium: &#x2F;images&#x2F;mouse32.ico</span><br></pre></td></tr></table></figure>
<p>再部署就可以看见图标已经更改。图片剪裁工具:<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a></p>
<h3 id="6-开通评论功能"><a href="#6-开通评论功能" class="headerlink" title="6. 开通评论功能"></a>6. 开通评论功能</h3><p>注册<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>,填写网站后可以得到一串代码,我们只需要其中一部分。<br> <img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/5.jpg" alt="peizhi"><br>复制这一串数字后我们打开主题配置文件,找到LiveRe comments system,去掉#注释,在livere_uid后粘贴上就完成了。</p>
<h3 id="7-赞赏"><a href="#7-赞赏" class="headerlink" title="7.赞赏"></a>7.赞赏</h3><p> 找到主题配置文件下的reward,把自己的微信收款或者支付宝收款二维码放上去就行了。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>到这里一个自己的博客基本上就搭好了,接下来就是自我探索折腾的过程了,网上资源很多可以慢慢折腾自己的博客,我也会不定期的更新我所获得的搭博客小技巧。</p>
<p>在属于自己的一片小天地尽情发挥吧!</p>
<hr>
<p>上一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE5-Markdown%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">个人博客建设5-Markdown语法</a><br>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设5-Markdown语法</title>
    <url>/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE5-Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<font size="3">
个人博客建设第五步:用基本的Markdown语法来写博客...

<a id="more"></a>
<hr>
<h3 id="为什么markdown"><a href="#为什么markdown" class="headerlink" title="为什么markdown"></a>为什么markdown</h3><p>首先我们写的每一篇博客都是基于md也就是markdown文件的,其次Markdown 是一种轻量级标记语言,它允许人们使用易读易写的纯文本格式编写文档,非常适合写博客。</p>
<h3 id="编辑器的选择"><a href="#编辑器的选择" class="headerlink" title="编辑器的选择"></a>编辑器的选择</h3><p>可以使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS code</a>, <a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a>或者<a href="https://sosfos.wordpress.com/" target="_blank" rel="noopener">BookPad</a>(注意这个收费14块)<br>具体的选择结合自身喜好,没有什么大的区别,都具有实时预览功能我觉得就够了。</p>
<h3 id="简单的几个语法"><a href="#简单的几个语法" class="headerlink" title="简单的几个语法"></a>简单的几个语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hello</span><br><span class="line">## hello</span><br></pre></td></tr></table></figure>
<p>上面两个分别是主标题和次级标题的区别,井号越多字体就越小,标题也越次级。</p>
<h4 id="2-字体和颜色"><a href="#2-字体和颜色" class="headerlink" title="2. 字体和颜色"></a>2. 字体和颜色</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font face&#x3D;&quot;黑体&quot;&gt;</span><br><span class="line">&lt;font color&#x3D;red size&#x3D;4&gt;</span><br><span class="line">&lt;font color&#x3D;red size&#x3D;4 face&#x3D;&quot;黑体&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>使用如上方式在之后加上文字的效果分别如下:<br><font face="黑体" size="4">我是好人<br><font color="red" size="4">我是好人<br><font color="red" size="6" face="黑体">我是好人</font></font></font></p>
<p>:kissing:</p>
<p><font size="3" face="微软雅黑">想要打出如上表情我们只需要输入</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:kissing:</span><br></pre></td></tr></table></figure>
<p>具体可以参考GitHub上: <a href="https://github.com/guodongxiaren/README/blob/master/emoji.md" target="_blank" rel="noopener">https://github.com/guodongxiaren/README/blob/master/emoji.md</a></p>
<h4 id="3-图片的插入"><a href="#3-图片的插入" class="headerlink" title="3. 图片的插入"></a>3. 图片的插入</h4><p>当我们使用Hexo建立博客的时候免不了要插入图片,我们可以在source下创建一个image文件夹然后通过:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](&#x2F;image&#x2F;image.png)</span><br></pre></td></tr></table></figure>
<p>来访问。但是这里我推荐以下一种用法虽然略有点麻烦,但是以后处理图片会很方便。<br>首先在博客的目录blog下用命令行运行如下代码安装一个小插件, 参考:<a href="https://github.com/xcodebuild/hexo-asset-image" target="_blank" rel="noopener">https://github.com/xcodebuild/hexo-asset-image</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>然后我们在站点配置文件_congif.yml中设置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
<p>之后我们我们只要在撰写博客的目录下,也就是source目录下的_posts文件夹内创建一个和这篇博客名字一样的文件夹,把图片放入其中,就可以按照如下来插入图片了:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片命名](logo.jpg)</span><br></pre></td></tr></table></figure>
<p>不需要指定图片的路径,另外如果是在命令行使用 hexo new 命令来创立新的md文件时会自动生成同名文件夹不需要手动另外创建。</p>
<h4 id="4-网站链接"><a href="#4-网站链接" class="headerlink" title="4. 网站链接"></a>4. 网站链接</h4><p>比起直接复制链接更好的方式是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[VS code](https:&#x2F;&#x2F;code.visualstudio.com&#x2F;)</span><br></pre></td></tr></table></figure>
<p>前面写在文章中呈现的名字,后面写链接,这样直接点文字就可以进入链接。</p>
<h4 id="5-强调"><a href="#5-强调" class="headerlink" title="5.强调"></a>5.强调</h4><p>使用如下命令就可以达到对某些文字强调的作用  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line">_single underscores_  </span><br><span class="line">**double asterisks**</span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure>
<p><em>single asterisks</em><br><em>single underscores</em><br><strong>double asterisks</strong><br><strong>double underscores</strong> </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>学会这几个基本命令就差不多可以开始写博客了,至于其他更多的命令请参考<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown中文版说明</a>。<br>希望大家写博客愉快!</p>
<hr>
<p>上一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE4-%E9%80%89%E6%8B%A9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">个人博客建设4-选择博客主题</a><br>下一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/" target="_blank" rel="noopener">个人博客建设6-主题的配置Next</a><br>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设4-选择博客主题</title>
    <url>/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE4-%E9%80%89%E6%8B%A9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<font size="3">
个人博客建设第四步:选择一个自己喜欢的主题模板...

<a id="more"></a>
<hr>
<h3 id="为什么使用模板"><a href="#为什么使用模板" class="headerlink" title="为什么使用模板"></a>为什么使用模板</h3><p>因为简单快速,自己开发的话。。。就要系统学习了。总之关于模板的选择我们可以参考知乎的之一篇回答:<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题</a>, 以及官网<a href="https://hexo.io/themes/。" target="_blank" rel="noopener">https://hexo.io/themes/。</a><br>我选用的是我个人觉得还蛮好的Next主题,大致样子可以参照我现在的博客。</p>
<h3 id="部署模板"><a href="#部署模板" class="headerlink" title="部署模板"></a>部署模板</h3><p>找到我们喜欢的模板后,在终端窗口下,定位到 Hexo 站点目录下,也就是blog文件夹内。使用 Git checkout 代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>等待下载完成后我们可以在站点目录下的themes看到多出来一个next文件夹,这就是我们的主题所在位置了。接着我们需要在站点配置文件里修改我们的主题(注意在我们的主题,也就是next文件夹里面也有一个同样名字的配置文件,那是主题配置文件,不要搞错了。)</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE4-%E9%80%89%E6%8B%A9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/1.png" alt="moban"></p>
<p>把主题如图修改完成后,我们输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>就可以部署我们新的主题上线了,当然也可以使用hexo server在本地查看主题的变化,不推送上线。<br>我们可以下载不止一个模板来查看他们是否适合我们,只需要重复如上步骤下载主题到themes文件夹内,然后修改站点配置文件就行了。<br>希望大家可以找到自己心仪的网站主题!!!</p>
<hr>
<p>上一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/#more" target="_blank" rel="noopener">个人博客建设3-申请并绑定域名</a><br>下一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE5-Markdown%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">个人博客建设5-Markdown语法</a><br>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设3-申请并绑定域名</title>
    <url>/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<font size="3">
个人博客建设第三步:申请并绑定域名...

<a id="more"></a>
<hr>
<h3 id="阿里云申请域名"><a href="#阿里云申请域名" class="headerlink" title="阿里云申请域名"></a>阿里云申请域名</h3><p>为什么要申请一个域名?因为酷炫啊!这里可以在任何地方申请域名,现在大多数平台都有云解析服务所以无所谓。这里以<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>举例子。</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/1.png" alt="github"></p>
<p>输入想要的域名然后搜索,可以选择还未被注册的域名。.com是国际域名.cn是国内域名,二者没有实质区别,当然也有些特别的选项…</p>
<p>买好域名后我们就要进行解析,登录阿里云后我们就可以开始解析了。</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/3.jpg" alt="github"></p>
<p>点进我们的域名后来到解析设置,添加两条A记录和一条CNAME记录(红圈),A记录的记录值是固定的192.30.252.153和190.30.252.154,为GitHub地址,CNAME记录为: 用户名.github.io 的形式。</p>
<p>这里A记录可实现将域名指向 IP 地址,当需要将域名指向另一个域名,再由另一个域名提供 IP 地址,就需要添加 CNAME 记录。</p>
<p>添加完记录后打开GitHub进入我们之前设置博客的仓库,点击settings(设置),我们拉到页面偏下方。</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/4.png" alt="github"></p>
<p>输入你申请的域名然后保存。</p>
<p>终于最后一步了,完成这步之后你的博客就可以通过域名访问了。冷静一下,我们打开本地保存博客的文件夹,进入source文件夹创建一个空白记事本在里面输入你申请的域名,然后把它保存为所有文件格式并且命名为CNAME。</p>
<p><img src="/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/5.png" alt="github"></p>
<p>然后常规操作g+d就可以使用自己的域名登录网站啦。</p>
<hr>
<p>上一步: <a href="https://www.guojingde.cn/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/" target="_blank" rel="noopener">个人博客建设2-安装并配置Node.js以及Hexo</a><br>下一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE4-%E9%80%89%E6%8B%A9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">个人博客建设4-选择博客主题</a><br>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设2:安装并配置Node.js以及Hexo</title>
    <url>/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/</url>
    <content><![CDATA[<font size="3">
个人博客建设第二步:安装并配置所需框架和环境...

<a id="more"></a>
<hr>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js允许通过JavaScript和一系列模块来编写服务器端应用和网络相关的r应用。</p>
<p>我们通过官网<a href="https://nodejs.org/en/download/来选择合适的版本进行下载,并且安装。安装完成后再window命令行或者windows自带的powershell输入" target="_blank" rel="noopener">https://nodejs.org/en/download/来选择合适的版本进行下载,并且安装。安装完成后再window命令行或者windows自带的powershell输入</a>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>出现对应版本号说明安装成功,npm会随着安装包自动安装,输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>同样出现对应版本号说明安装成功。到这里就完成来了环境安装。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo是一个快速、简洁且高效的博客框架。 Hexo使用Markdown解析文章,在几秒内,即可利用靓丽的主题生成静态网页。</p>
<p>第二步就是安装这个博客的框架,同样打开命令行输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>我们就开始安装Hexo了,等待他安装完后我们使用命令行移动到我们希望保存我们博客所有内容的文件夹内。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &lt;当前目录下文件夹名字&gt;</span><br></pre></td></tr></table></figure>
<p>使用如上命令就可以移动至我们希望博客项目保存的地方。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<p>接着使用如上命令就可以初始化我们的博客项目了。至此我们就可以在本地看我们的网站雏形了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new stest_my_site</span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>按照顺序输入如上命令,就会弹出提示,此时我们在浏览器访问localhost:4000就可以看见我们博客的雏形了。<br>hexo s = hexo server 启动服务预览<br>hexo g = hexo generate 生成<br>其他hexo命令:<br>hexo n “博客名称”  =&gt; hexo new “博客名称”   #这两个都是创建新文章,前者是简写模式<br>hexo clean   #清除缓存,网页正常情况下可以忽略此条命令<br>hexo d  =&gt; hexo deploy  #部署网站上线 (推送到GitHub)</p>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/1.jpg" alt="github"></p>
<p>这时候我们可以看到blog文件夹内大致是图中的样子,这时候我们打开站点配置文件,可以使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>来编辑。</p>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/2.png" alt="github"></p>
<p>我们翻到如图中的部署选项下,把之前在GitHub创建的库完整连接复制粘贴上并在结尾加上.git。(xxx.github.io.git )<br>然后在命令行输入如下命令来安装部署模块,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后常规操作g+s,就可以在浏览器通过访问xxx.github.io来进入个人主页了。<br>但是这个似乎有点傻,这时候我们需要一个帅气的域名!<br>于是下一篇就是:申请并绑定域名</p>
<hr>
<p>上一步: <a href="https://www.guojingde.cn/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/" target="_blank" rel="noopener">个人博客建设1-在GitHub创建一个仓库并配置Git</a></p>
<p>下一步: <a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/#more" target="_blank" rel="noopener">个人博客建设3-申请并绑定域名</a></p>
<p>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的几个基本指令</title>
    <url>/2020/01/20/Git%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>Git以及Git的几个最常用的指令,初步了解版本管理。</p>
<a id="more"></a>
<hr>
<h1 id="什么是Git以及为何使用Git"><a href="#什么是Git以及为何使用Git" class="headerlink" title="什么是Git以及为何使用Git?"></a>什么是Git以及为何使用Git?</h1><p>Git 是目前使用人数最多的版本管理工具。为什么会有Git呢?因为要版本控制。 举一个例子,小德要写论文那么他就可能要修改好几次,这时候比起在一个文件里修改小德可能会复制一个新的论文文件在新文件里修改。这时候就可能会有好几个版本的论文。其实平时使用的快捷键ctrl+z的撤回就是最简单的版本管理。</p>
<p>情况再复杂些,小德可能做的是一个小组作业,大家都有各自要做的部分,那么好玩的情况就是大家做完一部分后就要在微信或者邮箱里传来传去,而有了Git 一个团队就可以轻松合作。想要更加深入了解什么是Git 的可以访问 <a href="http://blog.a0z.me/2014/05/21/GitBeginning/" target="_blank" rel="noopener">Ghosty Core 的博客</a>。</p>
<p>Git 官网: <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p>
<h1 id="Git-的基本操作"><a href="#Git-的基本操作" class="headerlink" title="Git 的基本操作"></a>Git 的基本操作</h1><h3 id="1-命令行基本操作-和Linux一样"><a href="#1-命令行基本操作-和Linux一样" class="headerlink" title="1. 命令行基本操作(和Linux一样)"></a>1. 命令行基本操作(和Linux一样)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog # 切换到当前目录下叫blog的文件夹</span><br><span class="line">cd .. # 退回上一级目录</span><br><span class="line">ls # 查看当前目录下所有文件和文件夹</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd # 返回home目录~</span><br><span class="line">ls -ah # 查看当前目录下所有文件,文件夹以及隐藏文件</span><br><span class="line">pwd # 查看当前路径</span><br><span class="line">touch balabala.py # 在当前目录创建一个名字叫做balabala的python文件</span><br><span class="line">mkdir blog # 在当前目录创建一个叫blog的文件夹</span><br><span class="line">rm balabala.py # 删除该文件</span><br><span class="line">rm -r blog # 删除该文件夹</span><br><span class="line">mv &#123;src&#125; &#123;dest&#125; # 移动文件,如果 dest 是目录,则移动,是文件名则覆盖</span><br></pre></td></tr></table></figure>
<p>要使用git掌握前三个可以把目录移到工作目录init就行了… 下面的作为补充, 万一哪天没有图形化界面只有个命令行呢。</p>
<h3 id="2-创建一个仓库-初始化"><a href="#2-创建一个仓库-初始化" class="headerlink" title="2. 创建一个仓库,初始化"></a>2. 创建一个仓库,初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>在一个工作目录下输入后,就完成了初始化,可以看到隐藏文件有git文件夹。我们就有了一个仓库。</p>
<h3 id="3-查看目前状态"><a href="#3-查看目前状态" class="headerlink" title="3. 查看目前状态"></a>3. 查看目前状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>会提示你当前库的状态,追踪的文件,未追踪的文件,做过修改未commit(注释)的文件。</p>
<h3 id="4-提交修改"><a href="#4-提交修改" class="headerlink" title="4. 提交修改"></a>4. 提交修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt; # 指定一个文件提交</span><br><span class="line">git add . # 提交所有当前目录下文件</span><br></pre></td></tr></table></figure>
<p>修改文件完首先要把文件推送到staging index,选择要推送的文件或全部</p>
<h3 id="5-commit-注释"><a href="#5-commit-注释" class="headerlink" title="5. commit(注释)"></a>5. commit(注释)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;descriptions&quot; # 直接注释</span><br><span class="line">git commit 打开编辑器进行注释</span><br><span class="line">git commit --amend 对最近一次的提交做内容修改</span><br></pre></td></tr></table></figure>
<p>推送到staging index后需要添加注释,可以直接注释也可以选择自己喜欢的文本编辑器进行注释,Linux下的话可以是vim和nano等,Windows下可以是Notepad++等。注释完后文件就从staging index 推送到 repo仓库了。</p>
<h3 id="6-克隆GitHub远程仓库"><a href="#6-克隆GitHub远程仓库" class="headerlink" title="6. 克隆GitHub远程仓库"></a>6. 克隆GitHub远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;remote address&gt;</span><br></pre></td></tr></table></figure>
<p>可以下载远程Github的仓库到本地,例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;JasonVictor17&#x2F;Housing.git</span><br></pre></td></tr></table></figure>
<p>就可以复制我的一个repo到本地了。</p>
<h3 id="7-关联并推送到Github远程仓库"><a href="#7-关联并推送到Github远程仓库" class="headerlink" title="7. 关联并推送到Github远程仓库"></a>7. 关联并推送到Github远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;remote address&gt;	在本地工作区目录下按照 GitHub 提示进行关联</span><br><span class="line">git remote rm origin			解除错误关联</span><br><span class="line">git push -u origin master		第一次将本地仓库推送至远程仓库(每次在本地提交后进行操作)</span><br><span class="line">git push origin master			以后每次将本地仓库推送至远程仓库(每次在本地提交后进行操作)</span><br></pre></td></tr></table></figure>

<p>第一步要把本地库关联到一个GitHub库,在GitHub创建新库时会有提示如何操作。第二步就是推送本地库到远程库,第一次操作有所不同以后都一样。</p>
<h3 id="8-流程图"><a href="#8-流程图" class="headerlink" title="8.流程图"></a>8.流程图</h3><p>至此,一个大致的结构就可以形成了。</p>
<p><img src="/2020/01/20/Git%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/1.png" alt="github"></p>
]]></content>
      <categories>
        <category>Git &amp; GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客建设1:在GitHub创建一个仓库并配置Git</title>
    <url>/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/</url>
    <content><![CDATA[<font size="3">
个人博客建设第一步:配置GitHub,安装Git Bash并配置Git...

<a id="more"></a>
<hr>
<h3 id="首先什么是GitHub-以下是维基百科的定义"><a href="#首先什么是GitHub-以下是维基百科的定义" class="headerlink" title="首先什么是GitHub,以下是维基百科的定义:"></a>首先什么是GitHub,以下是维基百科的定义:</h3><p>GitHub是通过Git进行版本控制的软件源代码托管服务平台。</p>
<h3 id="那什么是Git"><a href="#那什么是Git" class="headerlink" title="那什么是Git?"></a>那什么是Git?</h3><p>Git是一个分布式版本控制软件,最初由林纳斯·托瓦兹创作,于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。</p>
<h3 id="看不懂没关系-只要会使用一样可以搭建个人博客。"><a href="#看不懂没关系-只要会使用一样可以搭建个人博客。" class="headerlink" title="看不懂没关系,只要会使用一样可以搭建个人博客。"></a>看不懂没关系,只要会使用一样可以搭建个人博客。</h3><p>首先我们要创建一个GitHub的账号,网址:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>创建完后我们就需要创建一个新的库,具体如图:</p>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/1.png" alt="github"></p>
<p>点击Repositories 再点击 New,然后进入到下个界面:</p>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/2.png" alt="github"></p>
<p>Repositories name 按照固定的格式写 username.github.io<br>这里的username就是你注册时候的用户名,像我就是JasonVictor17</p>
<p>到这里Github就配置好了,我们接着下一个Git Bash到Windows系统以便使用Git,<br>网址:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> 会自动下载</p>
<p>安装成功后需要配置Git Bash,打开Git bash我们看到命令行,输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后生成一个SSH密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/4.jpg" alt="github"></p>
<p>默认回车,然后系统会自动生成一个文件,然后在C盘user中找到.ssh文件夹(路径如图), 并复制其中id_rsa.pub的内容。然后打开 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">Github上的ssh key设置</a>。</p>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/3.png" alt="github"></p>
<p>点击new ssh key后输入名称和复制的内容确认就可以了。</p>
<p>(如果找不到SSH密匙文件有两个办法:1. <a href="https://desktop.github.com/" target="_blank" rel="noopener">下载GitHub桌面版</a>就可以无需密匙   2. 下载一个小程序: <a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">everything</a> 输入文件名字就可以查找)<br>接着输入如图就成功配置完成了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/5.png" alt="github"></p>
<p>绑定SSH Key的目的是为了之后每次pull和push的时候不需要输入密码和账号,怪麻烦的。同时也避免一些可能产生的错误。</p>
<p>关于Git的基本使用请参考: <a href="https://www.guojingde.cn/2020/01/19/Git%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/#more" target="_blank" rel="noopener">Git的几个基本指令</a></p>
<hr>
<p>下一步: <a href="https://www.guojingde.cn/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/" target="_blank" rel="noopener">个人博客建设2-安装并配置Node.js以及Hexo</a><br>目录: <a href="https://www.guojingde.cn/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">用GitHub搭建个人博客(目录)</a></p>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Image Classifier with Deep learning</title>
    <url>/2020/01/19/Image%20Classifier%20with%20Deep%20learning/</url>
    <content><![CDATA[<h1 id="Image-Classifier-with-Deep-learning"><a href="#Image-Classifier-with-Deep-learning" class="headerlink" title="Image Classifier with Deep learning"></a>Image Classifier with Deep learning</h1><p>Going forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you’d use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. </p>
<a id="more"></a>

<p>In this project, you’ll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you’d train this classifier, then export it for use in your application. We’ll be using <a href="http://www.robots.ox.ac.uk/~vgg/data/flowers/102/index.html" target="_blank" rel="noopener">this dataset</a> of 102 flower categories, you can see a few examples below. </p>
<p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/Flowers.png" alt="flowers"></p>
<p>The project is broken down into multiple steps:</p>
<ul>
<li>Load and preprocess the image dataset</li>
<li>Train the image classifier on your dataset</li>
<li>Use the trained classifier to predict image content</li>
</ul>
<p>We’ll lead you through each part which you’ll implement in Python.</p>
<p>When you’ve completed this project, you’ll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new.</p>
<p>First up is importing the packages you’ll need. It’s good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Imports here</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms, models</span><br><span class="line"><span class="keyword">import</span> helper</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>

<h2 id="Load-the-data"><a href="#Load-the-data" class="headerlink" title="Load the data"></a>Load the data</h2><p>Here you’ll use <code>torchvision</code> to load the data (<a href="http://pytorch.org/docs/0.3.0/torchvision/index.html" target="_blank" rel="noopener">documentation</a>). The data should be included alongside this notebook, otherwise you can <a href="https://s3.amazonaws.com/content.udacity-data.com/nd089/flower_data.tar.gz" target="_blank" rel="noopener">download it here</a>. The dataset is split into three parts, training, validation, and testing. For the training, you’ll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You’ll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks.</p>
<p>The validation and testing sets are used to measure the model’s performance on data it hasn’t seen yet. For this you don’t want any scaling or rotation transformations, but you’ll need to resize then crop the images to the appropriate size.</p>
<p>The pre-trained networks you’ll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you’ll need to normalize the means and standard deviations of the images to what the network expects. For the means, it’s <code>[0.485, 0.456, 0.406]</code> and for the standard deviations <code>[0.229, 0.224, 0.225]</code>, calculated from the ImageNet images.  These values will shift each color channel to be centered at 0 and range from -1 to 1.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_dir = <span class="string">'flowers'</span></span><br><span class="line">train_dir = data_dir + <span class="string">'/train'</span></span><br><span class="line">valid_dir = data_dir + <span class="string">'/valid'</span></span><br><span class="line">test_dir = data_dir + <span class="string">'/test'</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Define your transforms for the training, validation, and testing sets</span></span><br><span class="line">train_transforms = transforms.Compose([transforms.RandomRotation(<span class="number">30</span>),</span><br><span class="line">                                       transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                                       transforms.RandomHorizontalFlip(),</span><br><span class="line">                                       transforms.ToTensor(),</span><br><span class="line">                                       transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                                                            [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])]) </span><br><span class="line">valid_transforms = transforms.Compose([transforms.Resize(<span class="number">255</span>),</span><br><span class="line">                                      transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                      transforms.ToTensor(),</span><br><span class="line">                                      transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                                                            [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line">test_transforms = transforms.Compose([transforms.Resize(<span class="number">255</span>),</span><br><span class="line">                                      transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                      transforms.ToTensor(),</span><br><span class="line">                                      transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                                                            [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Load the datasets with ImageFolder</span></span><br><span class="line">train_data = datasets.ImageFolder(train_dir, transform=train_transforms)</span><br><span class="line">valid_data = datasets.ImageFolder(valid_dir, transform=valid_transforms)</span><br><span class="line">test_data = datasets.ImageFolder(test_dir, transform=test_transforms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Using the image datasets and the trainforms, define the dataloaders</span></span><br><span class="line">trainloader = torch.utils.data.DataLoader(train_data, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">validloader = torch.utils.data.DataLoader(valid_data, batch_size=<span class="number">64</span>)</span><br><span class="line">testloader = torch.utils.data.DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">image_datasets = [train_data, valid_data, test_data]</span><br><span class="line">dataloaders = [trainloader, validloader, testloader]</span><br></pre></td></tr></table></figure>

<h3 id="Label-mapping"><a href="#Label-mapping" class="headerlink" title="Label mapping"></a>Label mapping</h3><p>You’ll also need to load in a mapping from category label to category name. You can find this in the file <code>cat_to_name.json</code>. It’s a JSON object which you can read in with the <a href="https://docs.python.org/2/library/json.html" target="_blank" rel="noopener"><code>json</code> module</a>. This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'cat_to_name.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cat_to_name = json.load(f)</span><br></pre></td></tr></table></figure>

<h1 id="Building-and-training-the-classifier"><a href="#Building-and-training-the-classifier" class="headerlink" title="Building and training the classifier"></a>Building and training the classifier</h1><p>Now that the data is ready, it’s time to build and train the classifier. As usual, you should use one of the pretrained models from <code>torchvision.models</code> to get the image features. Build and train a new feed-forward classifier using those features.</p>
<p>We’re going to leave this part up to you. Refer to <a href="https://review.udacity.com/#!/rubrics/1663/view" target="_blank" rel="noopener">the rubric</a> for guidance on successfully completing this section. Things you’ll need to do:</p>
<ul>
<li>Load a <a href="http://pytorch.org/docs/master/torchvision/models.html" target="_blank" rel="noopener">pre-trained network</a> (If you need a starting point, the VGG networks work great and are straightforward to use)</li>
<li>Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout</li>
<li>Train the classifier layers using backpropagation using the pre-trained network to get the features</li>
<li>Track the loss and accuracy on the validation set to determine the best hyperparameters</li>
</ul>
<p>We’ve left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You’ll likely find that as you work through each part, you’ll need to go back and modify your previous code. This is totally normal!</p>
<p>When training make sure you’re updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project.</p>
<p>One last important tip if you’re using the workspace to run your code: To avoid having your workspace disconnect during the long-running tasks in this notebook, please read in the earlier page in this lesson called Intro to<br>GPU Workspaces about Keeping Your Session Active. You’ll want to include code from the workspace_utils.py module.</p>
<p><strong>Note for Workspace users:</strong> If your network is over 1 GB when saved as a checkpoint, there might be issues with saving backups in your workspace. Typically this happens with wide dense layers after the convolutional layers. If your saved checkpoint is larger than 1 GB (you can open a terminal and check with <code>ls -lh</code>), you should reduce the size of your hidden layers and train again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Build and train your network</span></span><br><span class="line">model = models.vgg19(pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Freeze parameters so we don't backprop through them</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    param.requires_grad = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">model.classifier = nn.Sequential(nn.Linear(<span class="number">25088</span>, <span class="number">2048</span>),</span><br><span class="line">                                 nn.ReLU(),</span><br><span class="line">                                 nn.Dropout(<span class="number">0.25</span>),</span><br><span class="line">                                 nn.Linear(<span class="number">2048</span>, <span class="number">102</span>),</span><br><span class="line">                                 nn.LogSoftmax(dim=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">criterion = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only train the classifier parameters, feature parameters are frozen</span></span><br><span class="line">optimizer = optim.Adam(model.classifier.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">model</span><br></pre></td></tr></table></figure>




<pre><code>VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace=True)
    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): ReLU(inplace=True)
    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (26): ReLU(inplace=True)
    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): ReLU(inplace=True)
    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): ReLU(inplace=True)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): ReLU(inplace=True)
    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=2048, bias=True)
    (1): ReLU()
    (2): Dropout(p=0.25, inplace=False)
    (3): Linear(in_features=2048, out_features=102, bias=True)
    (4): LogSoftmax()
  )
)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.to(device)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">epochs = <span class="number">8</span></span><br><span class="line">steps = <span class="number">0</span></span><br><span class="line">running_loss = <span class="number">0</span></span><br><span class="line">print_every = <span class="number">50</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">    <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> trainloader:</span><br><span class="line">        steps += <span class="number">1</span></span><br><span class="line">        inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">        </span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        </span><br><span class="line">        logps = model.forward(inputs)</span><br><span class="line">        loss = criterion(logps, labels)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> steps % print_every == <span class="number">0</span>:</span><br><span class="line">            test_loss = <span class="number">0</span></span><br><span class="line">            accuracy = <span class="number">0</span></span><br><span class="line">            model.eval()</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> validloader:</span><br><span class="line">                    inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">                    logps = model.forward(inputs)</span><br><span class="line">                    batch_loss = criterion(logps, labels)</span><br><span class="line">                    </span><br><span class="line">                    test_loss += batch_loss.item()</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># Calculate accuracy</span></span><br><span class="line">                    ps = torch.exp(logps)</span><br><span class="line">                    top_p, top_class = ps.topk(<span class="number">1</span>, dim=<span class="number">1</span>)</span><br><span class="line">                    equals = top_class == labels.view(*top_class.shape)</span><br><span class="line">                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()</span><br><span class="line">                    </span><br><span class="line">            print(<span class="string">"Epoch: &#123;&#125;/&#123;&#125;.. "</span>.format(e+<span class="number">1</span>, epochs),</span><br><span class="line">                  <span class="string">f"Train loss: <span class="subst">&#123;running_loss/print_every:<span class="number">.3</span>f&#125;</span>.. "</span></span><br><span class="line">                  <span class="string">f"Valid loss: <span class="subst">&#123;test_loss/len(validloader):<span class="number">.3</span>f&#125;</span>.. "</span></span><br><span class="line">                  <span class="string">f"Valid accuracy: <span class="subst">&#123;accuracy/len(validloader):<span class="number">.3</span>f&#125;</span>"</span>)</span><br><span class="line">            running_loss = <span class="number">0</span></span><br><span class="line">            model.train()</span><br><span class="line">time_end = time.time() - start</span><br><span class="line">print(<span class="string">"\nTotal time: &#123;:.0f&#125;m &#123;:.0f&#125;s"</span>.format(time_end//<span class="number">60</span>, time_end % <span class="number">60</span>))</span><br></pre></td></tr></table></figure>

<pre><code>Epoch: 1/8..  Train loss: 3.569.. Valid loss: 1.455.. Valid accuracy: 0.612
Epoch: 1/8..  Train loss: 1.689.. Valid loss: 0.859.. Valid accuracy: 0.768
Epoch: 2/8..  Train loss: 1.296.. Valid loss: 0.759.. Valid accuracy: 0.784
Epoch: 2/8..  Train loss: 1.181.. Valid loss: 0.720.. Valid accuracy: 0.800
Epoch: 3/8..  Train loss: 1.054.. Valid loss: 0.655.. Valid accuracy: 0.809
Epoch: 3/8..  Train loss: 1.020.. Valid loss: 0.517.. Valid accuracy: 0.839
Epoch: 4/8..  Train loss: 0.988.. Valid loss: 0.487.. Valid accuracy: 0.850
Epoch: 4/8..  Train loss: 0.932.. Valid loss: 0.596.. Valid accuracy: 0.832
Epoch: 5/8..  Train loss: 0.893.. Valid loss: 0.517.. Valid accuracy: 0.857
Epoch: 5/8..  Train loss: 0.854.. Valid loss: 0.493.. Valid accuracy: 0.870
Epoch: 6/8..  Train loss: 0.790.. Valid loss: 0.508.. Valid accuracy: 0.861
Epoch: 6/8..  Train loss: 0.806.. Valid loss: 0.491.. Valid accuracy: 0.873
Epoch: 7/8..  Train loss: 0.806.. Valid loss: 0.565.. Valid accuracy: 0.861
Epoch: 7/8..  Train loss: 0.825.. Valid loss: 0.449.. Valid accuracy: 0.887
Epoch: 8/8..  Train loss: 0.734.. Valid loss: 0.453.. Valid accuracy: 0.882
Epoch: 8/8..  Train loss: 0.773.. Valid loss: 0.539.. Valid accuracy: 0.860

Total time: 14m 39s</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Testing-your-network"><a href="#Testing-your-network" class="headerlink" title="Testing your network"></a>Testing your network</h2><p>It’s good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model’s performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Do validation on the test set</span></span><br><span class="line">model.eval()</span><br><span class="line">accuracy = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> testloader:</span><br><span class="line">        inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">        logps = model.forward(inputs)</span><br><span class="line">        batch_loss = criterion(logps, labels)</span><br><span class="line">                    </span><br><span class="line">        test_loss += batch_loss.item()</span><br><span class="line">                    </span><br><span class="line">        <span class="comment"># Calculate accuracy</span></span><br><span class="line">        ps = torch.exp(logps)</span><br><span class="line">        top_p, top_class = ps.topk(<span class="number">1</span>, dim=<span class="number">1</span>)</span><br><span class="line">        equals = top_class == labels.view(*top_class.shape)</span><br><span class="line">        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()</span><br><span class="line">print(<span class="string">f"Valid accuracy: <span class="subst">&#123;accuracy/len(testloader):<span class="number">.3</span>f&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Valid accuracy: 0.854</code></pre><h2 id="Save-the-checkpoint"><a href="#Save-the-checkpoint" class="headerlink" title="Save the checkpoint"></a>Save the checkpoint</h2><p>Now that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: <code>image_datasets[&#39;train&#39;].class_to_idx</code>. You can attach this to the model as an attribute which makes inference easier later on.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Remember that you&#39;ll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you&#39;ll want to save the number of epochs as well as the optimizer state, &#96;optimizer.state_dict&#96;. You&#39;ll likely want to use this trained model in the next part of the project, so best to save it now.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line"># TODO: Save the checkpoint     </span><br><span class="line">classifier &#x3D; nn.Sequential(nn.Linear(25088, 2048),</span><br><span class="line">                           nn.ReLU(),</span><br><span class="line">                           nn.Dropout(0.25),</span><br><span class="line">                           nn.Linear(2048, 102),</span><br><span class="line">                           nn.LogSoftmax(dim&#x3D;1))</span><br><span class="line"></span><br><span class="line">model.class_to_idx &#x3D; image_datasets[0].class_to_idx</span><br><span class="line">checkpoint &#x3D; &#123;&#39;input_size&#39;: 25088,</span><br><span class="line">              &#39;output_size&#39;: 102,</span><br><span class="line">              &#39;classifier&#39; : classifier,</span><br><span class="line">              &#39;arch&#39;: &#39;vgg19&#39;,</span><br><span class="line">              &#39;optimizer&#39;: optimizer.state_dict(),</span><br><span class="line">              &#39;state_dict&#39;: model.state_dict(),</span><br><span class="line">              &#39;class_to_idx&#39;: model.class_to_idx&#125;</span><br><span class="line">torch.save(checkpoint, &#39;checkpoint.pth&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="Loading-the-checkpoint"><a href="#Loading-the-checkpoint" class="headerlink" title="Loading the checkpoint"></a>Loading the checkpoint</h2><p>At this point it’s good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Write a function that loads a checkpoint and rebuilds the model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_checkpoint</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    checkpoints = torch.load(filepath)</span><br><span class="line">    model = models.vgg19(pretrained=<span class="literal">True</span>)</span><br><span class="line">    model.class_to_idx = checkpoints[<span class="string">'class_to_idx'</span>]</span><br><span class="line">    </span><br><span class="line">    model.classifier = checkpoints[<span class="string">'classifier'</span>]</span><br><span class="line">    </span><br><span class="line">    model.load_state_dict(checkpoints[<span class="string">'state_dict'</span>])</span><br><span class="line">    optimizer.load_state_dict(checkpoints[<span class="string">'optimizer'</span>])                       </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = load_checkpoint(<span class="string">'checkpoint.pth'</span>)</span><br><span class="line">print(model)</span><br></pre></td></tr></table></figure>

<pre><code>VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace=True)
    (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): ReLU(inplace=True)
    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (26): ReLU(inplace=True)
    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): ReLU(inplace=True)
    (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): ReLU(inplace=True)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): ReLU(inplace=True)
    (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=2048, bias=True)
    (1): ReLU()
    (2): Dropout(p=0.25, inplace=False)
    (3): Linear(in_features=2048, out_features=102, bias=True)
    (4): LogSoftmax()
  )
)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Inference-for-classification"><a href="#Inference-for-classification" class="headerlink" title="Inference for classification"></a>Inference for classification</h1><p>Now you’ll write a function to use a trained network for inference. That is, you’ll pass an image into the network and predict the class of the flower in the image. Write a function called <code>predict</code> that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">probs, classes = predict(image_path, model)</span><br><span class="line">print(probs)</span><br><span class="line">print(classes)</span><br><span class="line">&gt; [ <span class="number">0.01558163</span>  <span class="number">0.01541934</span>  <span class="number">0.01452626</span>  <span class="number">0.01443549</span>  <span class="number">0.01407339</span>]</span><br><span class="line">&gt; [<span class="string">'70'</span>, <span class="string">'3'</span>, <span class="string">'45'</span>, <span class="string">'62'</span>, <span class="string">'55'</span>]</span><br></pre></td></tr></table></figure>

<p>First you’ll need to handle processing the input image such that it can be used in your network. </p>
<h2 id="Image-Preprocessing"><a href="#Image-Preprocessing" class="headerlink" title="Image Preprocessing"></a>Image Preprocessing</h2><p>You’ll want to use <code>PIL</code> to load the image (<a href="https://pillow.readthedocs.io/en/latest/reference/Image.html" target="_blank" rel="noopener">documentation</a>). It’s best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. </p>
<p>First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the <a href="http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail" target="_blank" rel="noopener"><code>thumbnail</code></a> or <a href="http://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.thumbnail" target="_blank" rel="noopener"><code>resize</code></a> methods. Then you’ll need to crop out the center 224x224 portion of the image.</p>
<p>Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You’ll need to convert the values. It’s easiest with a Numpy array, which you can get from a PIL image like so <code>np_image = np.array(pil_image)</code>.</p>
<p>As before, the network expects the images to be normalized in a specific way. For the means, it’s <code>[0.485, 0.456, 0.406]</code> and for the standard deviations <code>[0.229, 0.224, 0.225]</code>. You’ll want to subtract the means from each color channel, then divide by the standard deviation. </p>
<p>And finally, PyTorch expects the color channel to be the first dimension but it’s the third dimension in the PIL image and Numpy array. You can reorder dimensions using <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.transpose.html" target="_blank" rel="noopener"><code>ndarray.transpose</code></a>. The color channel needs to be first and retain the order of the other two dimensions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Process a PIL image for use in a PyTorch model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_image</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="string">''' Scales, crops, and normalizes a PIL image for a PyTorch model,</span></span><br><span class="line"><span class="string">        returns an Numpy array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    im = Image.open(image)</span><br><span class="line">    im = im.resize((<span class="number">256</span>,<span class="number">256</span>))</span><br><span class="line">    transform = transforms.Compose([transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                                    transforms.ToTensor(),</span><br><span class="line">                                    transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                                                         [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])])</span><br><span class="line">    im = transform(im)</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure>

<p>To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your <code>process_image</code> function works, running the output through this function should return the original image (except for the cropped out portions).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span><span class="params">(image, ax=None, title=None)</span>:</span></span><br><span class="line">    <span class="string">"""Imshow for Tensor."""</span></span><br><span class="line">    <span class="keyword">if</span> ax <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># PyTorch tensors assume the color channel is the first dimension</span></span><br><span class="line">    <span class="comment"># but matplotlib assumes is the third dimension</span></span><br><span class="line">    image = image.numpy().transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Undo preprocessing</span></span><br><span class="line">    mean = np.array([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>])</span><br><span class="line">    std = np.array([<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    image = std * image + mean</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Image needs to be clipped between 0 and 1 or it looks like noise when displayed</span></span><br><span class="line">    image = np.clip(image, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    ax.imshow(image)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ax</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show original pics</span></span><br><span class="line">image_path = test_dir + <span class="string">'/17/image_03911.jpg'</span></span><br><span class="line">pic = Image.open(image_path)</span><br><span class="line">pic</span><br></pre></td></tr></table></figure>




<p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/output_24_0.png" alt="花"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show processed pics</span></span><br><span class="line">pic_process = process_image(image_path)</span><br><span class="line">imshow(pic_process)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ae83fbbf08&gt;</code></pre><p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/output_25_1.png" alt="花"></p>
<h2 id="Class-Prediction"><a href="#Class-Prediction" class="headerlink" title="Class Prediction"></a>Class Prediction</h2><p>Once you can get images in the correct format, it’s time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You’ll want to calculate the class probabilities then find the $K$ largest values.</p>
<p>To get the top $K$ largest values in a tensor use <a href="http://pytorch.org/docs/master/torch.html#torch.topk" target="_blank" rel="noopener"><code>x.topk(k)</code></a>. This method returns both the highest <code>k</code> probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using <code>class_to_idx</code> which hopefully you added to the model or from an <code>ImageFolder</code> you used to load the data (<a href="#Save-the-checkpoint">see here</a>). Make sure to invert the dictionary so you get a mapping from index to class as well.</p>
<p>Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">probs, classes = predict(image_path, model)</span><br><span class="line">print(probs)</span><br><span class="line">print(classes)</span><br><span class="line">&gt; [ <span class="number">0.01558163</span>  <span class="number">0.01541934</span>  <span class="number">0.01452626</span>  <span class="number">0.01443549</span>  <span class="number">0.01407339</span>]</span><br><span class="line">&gt; [<span class="string">'70'</span>, <span class="string">'3'</span>, <span class="string">'45'</span>, <span class="string">'62'</span>, <span class="string">'55'</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(image_path, model, topk=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="string">''' Predict the class (or classes) of an image using a trained deep learning model.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    processed_image = process_image(image_path)</span><br><span class="line">    processed_image.unsqueeze_(<span class="number">0</span>)</span><br><span class="line">    probs = torch.exp(model.forward(processed_image))</span><br><span class="line">    top_probs, top_index = probs.topk(topk)</span><br><span class="line">    top_index = top_index[<span class="number">0</span>].numpy()</span><br><span class="line">    index = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(model.class_to_idx.items())):</span><br><span class="line">        index.append(list(model.class_to_idx.items())[i][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    label = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        label.append(index[top_index[i]])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top_probs, label</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_path = test_dir  + <span class="string">'/17/image_03911.jpg'</span></span><br><span class="line">predict(img_path, model, topk=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(tensor([[9.8274e-01, 1.6505e-02, 3.9908e-04, 1.0707e-04, 9.1983e-05]],
        grad_fn=&lt;TopkBackward&gt;), [&apos;17&apos;, &apos;100&apos;, &apos;18&apos;, &apos;34&apos;, &apos;92&apos;])</code></pre><h2 id="Sanity-Checking"><a href="#Sanity-Checking" class="headerlink" title="Sanity Checking"></a>Sanity Checking</h2><p>Now that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it’s always good to check that there aren’t obvious bugs. Use <code>matplotlib</code> to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this:</p>
<p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/inference_example.png" alt="flowers"></p>
<p>You can convert from the class integer encoding to actual flower names with the <code>cat_to_name.json</code> file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the <code>imshow</code> function defined above.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span> Display an image along with the top 5 classes</span></span><br><span class="line">prob, classes = predict(img_path, model)</span><br><span class="line">prob = prob[<span class="number">0</span>].detach().numpy()</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> classes:</span><br><span class="line">    labels.append(cat_to_name[each])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax = plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">flower_num = img_path.split(<span class="string">'/'</span>)[<span class="number">2</span>] <span class="comment"># find the index of the flower</span></span><br><span class="line">title= cat_to_name[flower_num] </span><br><span class="line">img = process_image(img_path)</span><br><span class="line">plt.title(title)</span><br><span class="line">imshow(img, ax)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">sns.barplot(prob, y=labels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/output_31_0.png" alt="花"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test a flower pic outside the dataset</span></span><br><span class="line">img_path = <span class="string">'C:\\Users\\jasonguo\\Desktop\\flowers_zwy\\11.JPG'</span></span><br><span class="line">prob, classes = predict(img_path, model)</span><br><span class="line">prob = prob[<span class="number">0</span>].detach().numpy()</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> classes:</span><br><span class="line">    labels.append(cat_to_name[each])</span><br><span class="line">plt.figure(figsize = (<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax = plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">img = process_image(img_path)</span><br><span class="line">imshow(img, ax)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">sns.barplot(prob, y=labels)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># wihch is exactly true</span></span><br></pre></td></tr></table></figure>


<p><img src="/2020/01/19/Image%20Classifier%20with%20Deep%20learning/output_32_0.png" alt="花"></p>
]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>用GitHub搭建个人博客(目录)</title>
    <url>/2020/01/19/%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<font size="3">
快速上手使用GitHub+Hexo建立博客,适合新手。
环境:Windows
本文是目录篇,包含了所有关于使用GitHub+Hexo建立博客的相关教程。会逐渐更新。。。

<a id="more"></a>
<hr>
<h1 id="首先为什么使用GitHub-Hexo建立博客"><a href="#首先为什么使用GitHub-Hexo建立博客" class="headerlink" title="首先为什么使用GitHub+Hexo建立博客"></a>首先为什么使用GitHub+Hexo建立博客</h1><h2 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h2><h4 id="1-不需要服务器省钱省时间呀-主要原因"><a href="#1-不需要服务器省钱省时间呀-主要原因" class="headerlink" title="1. 不需要服务器省钱省时间呀(主要原因)"></a>1. 不需要服务器省钱省时间呀(主要原因)</h4><h4 id="2-适合新手以及对建站不熟悉的小白-本人"><a href="#2-适合新手以及对建站不熟悉的小白-本人" class="headerlink" title="2. 适合新手以及对建站不熟悉的小白(本人)"></a>2. 适合新手以及对建站不熟悉的小白(本人)</h4><h4 id="3-有很多现成精美模板"><a href="#3-有很多现成精美模板" class="headerlink" title="3. 有很多现成精美模板"></a>3. 有很多现成精美模板</h4><h4 id="4-无流量限制"><a href="#4-无流量限制" class="headerlink" title="4. 无流量限制"></a>4. 无流量限制</h4><h2 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h2><h4 id="1-个性化空间小"><a href="#1-个性化空间小" class="headerlink" title="1.个性化空间小"></a>1.个性化空间小</h4><h4 id="2-静态页面-虽然博客以及足矣"><a href="#2-静态页面-虽然博客以及足矣" class="headerlink" title="2.静态页面(虽然博客以及足矣)"></a>2.静态页面(虽然博客以及足矣)</h4><h4 id="3-没有数据库-不适合大型网站-运行一次就要遍历所有网站内容"><a href="#3-没有数据库-不适合大型网站-运行一次就要遍历所有网站内容" class="headerlink" title="3.没有数据库,不适合大型网站,运行一次就要遍历所有网站内容"></a>3.没有数据库,不适合大型网站,运行一次就要遍历所有网站内容</h4><h1 id="总之就是非常适合做个人博客就对了。"><a href="#总之就是非常适合做个人博客就对了。" class="headerlink" title=" 总之就是非常适合做个人博客就对了。"></a><font color="red" size="4"> <strong>总之就是非常适合做个人博客就对了。</strong></font></h1><p>完成这个博客项目你需要:<br>  1.非常基础的Git知识,熟悉命令行(参照文末辅助资料)<br>  2.喜欢折腾<br>  3.耐心</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li><a href="https://www.guojingde.cn/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE1-%E5%9C%A8GitHub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%B9%B6%E9%85%8D%E7%BD%AEGit/" target="_blank" rel="noopener">个人博客建设1-在GitHub创建一个仓库并配置Git</a></li>
<li><a href="https://www.guojingde.cn/2020/01/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE2-%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AENode.js%E4%BB%A5%E5%8F%8AHexo/" target="_blank" rel="noopener">个人博客建设2-安装并配置Node.js以及Hexo</a></li>
<li><a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE3-%E7%94%B3%E8%AF%B7%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/#more" target="_blank" rel="noopener">个人博客建设3-申请并绑定域名</a></li>
<li><a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE4-%E9%80%89%E6%8B%A9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/" target="_blank" rel="noopener">个人博客建设4-选择博客主题</a></li>
<li><a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE5-Markdown%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">个人博客建设5-Markdown语法</a></li>
<li><a href="https://www.guojingde.cn/2020/01/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE6-%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AENext/" target="_blank" rel="noopener">个人博客建设6-主题的配置Next</a><h1 id="其他辅助资料"><a href="#其他辅助资料" class="headerlink" title="其他辅助资料"></a>其他辅助资料</h1><ol>
<li><a href="https://www.guojingde.cn/2020/01/19/Git%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/#more" target="_blank" rel="noopener">Git的几个基本指令</a></li>
</ol>
</li>
</ol>
</font>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
