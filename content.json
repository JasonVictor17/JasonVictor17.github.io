[{"title":"个人博客建设2:安装并配置Node.js以及Hexo","date":"2020-01-20T17:13:35.000Z","path":"2020/01/20/个人博客建设2-安装并配置Node.js以及Hexo/","text":"个人博客建设第二步:安装并配置所需框架和环境… 安装 Node.jsNode.js允许通过JavaScript和一系列模块来编写服务器端应用和网络相关的r应用。 我们通过官网https://nodejs.org/en/download/来选择合适的版本进行下载,并且安装。安装完成后再window命令行或者windows自带的powershell输入: 1node -v 出现对应版本号说明安装成功,npm会随着安装包自动安装,输入: 1npm -v 同样出现对应版本号说明安装成功。到这里就完成来了环境安装。 安装HexoHexo是一个快速、简洁且高效的博客框架。 Hexo使用Markdown解析文章,在几秒内,即可利用靓丽的主题生成静态网页。 第二步就是安装这个博客的框架,同样打开命令行输入: 1npm install -g hexo-cli 我们就开始安装Hexo了,等待他安装完后我们使用命令行移动到我们希望保存我们博客所有内容的文件夹内。 1cd &lt;当前目录下文件夹名字&gt; 使用如上命令就可以移动至我们希望博客项目保存的地方。 1hexo init blog 接着使用如上命令就可以初始化我们的博客项目了。至此我们就可以在本地看我们的网站雏形了。 123hexo new stest_my_sitehexo g hexo s 按照顺序输入如上命令,就会弹出提示,此时我们在浏览器访问localhost:4000就可以看见我们博客的雏形了。hexo s = hexo server 启动服务预览hexo g = hexo generate 生成其他hexo命令:hexo n “博客名称” =&gt; hexo new “博客名称” #这两个都是创建新文章,前者是简写模式hexo clean #清除缓存,网页正常情况下可以忽略此条命令hexo d =&gt; hexo deploy #部署网站上线 (推送到GitHub) 这时候我们可以看到blog文件夹内大致是图中的样子,这时候我们打开站点配置文件,可以使用Visual Studio Code来编辑。 我们翻到如图中的部署选项下,把之前在GitHub创建的库完整连接复制粘贴上并在结尾加上.git。(xxx.github.io.git )然后在命令行输入如下命令来安装部署模块, 1npm install hexo-deployer-git --save 然后常规操作g+s,就可以在浏览器通过访问xxx.github.io来进入个人主页了。但是这个似乎有点傻,这时候我们需要一个帅气的域名!于是下一篇就是:申请并绑定域名 上一步: 个人博客建设1-在GitHub创建一个仓库并配置Git 下一步: [申请并绑定域名] 目录: 用GitHub搭建个人博客(目录)","comments":true,"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"Git的几个基本指令","date":"2020-01-20T16:13:35.000Z","path":"2020/01/20/Git的几个基本指令/","text":"Git以及Git的几个最常用的指令,初步了解版本管理。 什么是Git以及为何使用Git?Git 是目前使用人数最多的版本管理工具。为什么会有Git呢?因为要版本控制。 举一个例子,小德要写论文那么他就可能要修改好几次,这时候比起在一个文件里修改小德可能会复制一个新的论文文件在新文件里修改。这时候就可能会有好几个版本的论文。其实平时使用的快捷键ctrl+z的撤回就是最简单的版本管理。 情况再复杂些,小德可能做的是一个小组作业,大家都有各自要做的部分,那么好玩的情况就是大家做完一部分后就要在微信或者邮箱里传来传去,而有了Git 一个团队就可以轻松合作。想要更加深入了解什么是Git 的可以访问 Ghosty Core 的博客。 Git 官网: https://git-scm.com/ Git 的基本操作1. 命令行基本操作(和Linux一样)123cd blog # 切换到当前目录下叫blog的文件夹cd .. # 退回上一级目录ls # 查看当前目录下所有文件和文件夹 12345678cd # 返回home目录~ls -ah # 查看当前目录下所有文件,文件夹以及隐藏文件pwd # 查看当前路径touch balabala.py # 在当前目录创建一个名字叫做balabala的python文件mkdir blog # 在当前目录创建一个叫blog的文件夹rm balabala.py # 删除该文件rm -r blog # 删除该文件夹mv &#123;src&#125; &#123;dest&#125; # 移动文件,如果 dest 是目录,则移动,是文件名则覆盖 要使用git掌握前三个可以把目录移到工作目录init就行了… 下面的作为补充, 万一哪天没有图形化界面只有个命令行呢。 2. 创建一个仓库,初始化1git init 在一个工作目录下输入后,就完成了初始化,可以看到隐藏文件有git文件夹。我们就有了一个仓库。 3. 查看目前状态1git status 会提示你当前库的状态,追踪的文件,未追踪的文件,做过修改未commit(注释)的文件。 4. 提交修改12git add &lt;file&gt; # 指定一个文件提交git add . # 提交所有当前目录下文件 修改文件完首先要把文件推送到staging index,选择要推送的文件或全部 5. commit(注释)123git commit -m &quot;descriptions&quot; # 直接注释git commit 打开编辑器进行注释git commit --amend 对最近一次的提交做内容修改 推送到staging index后需要添加注释,可以直接注释也可以选择自己喜欢的文本编辑器进行注释,Linux下的话可以是vim和nano等,Windows下可以是Notepad++等。注释完后文件就从staging index 推送到 repo仓库了。 6. 克隆GitHub远程仓库1git clone &lt;remote address&gt; 可以下载远程Github的仓库到本地,例如 1git clone https:&#x2F;&#x2F;github.com&#x2F;JasonVictor17&#x2F;Housing.git 就可以复制我的一个repo到本地了。 7. 关联并推送到Github远程仓库1234git remote add origin &lt;remote address&gt; 在本地工作区目录下按照 GitHub 提示进行关联git remote rm origin 解除错误关联git push -u origin master 第一次将本地仓库推送至远程仓库(每次在本地提交后进行操作)git push origin master 以后每次将本地仓库推送至远程仓库(每次在本地提交后进行操作) 第一步要把本地库关联到一个GitHub库,在GitHub创建新库时会有提示如何操作。第二步就是推送本地库到远程库,第一次操作有所不同以后都一样。 8.流程图至此,一个大致的结构就可以形成了。","comments":true,"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"个人博客建设1:在GitHub创建一个仓库并配置Git","date":"2020-01-20T14:13:35.000Z","path":"2020/01/20/个人博客建设1-在GitHub创建一个仓库并配置Git/","text":"个人博客建设第一步:配置GitHub,安装Git Bash并配置Git… 首先什么是GitHub,以下是维基百科的定义:GitHub是通过Git进行版本控制的软件源代码托管服务平台。 那什么是Git?Git是一个分布式版本控制软件,最初由林纳斯·托瓦兹创作,于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。 看不懂没关系,只要会使用一样可以搭建个人博客。首先我们要创建一个GitHub的账号,网址:https://github.com/创建完后我们就需要创建一个新的库,具体如图: 点击Repositories 再点击 New,然后进入到下个界面: Repositories name 按照固定的格式写 username.github.io这里的username就是你注册时候的用户名,像我就是JasonVictor17 到这里Github就配置好了,我们接着下一个Git Bash到Windows系统以便使用Git,网址:https://git-scm.com/download/win 会自动下载 安装成功后需要配置Git Bash,打开Git bash我们看到命令行,输入: 12git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot; 然后生成一个SSH密钥 1ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 默认回车,然后系统会自动生成一个文件,然后在C盘user中找到.ssh文件夹(路径如图), 并复制其中id_rsa.pub的内容。然后打开 Github上的ssh key设置。 点击new ssh key后输入名称和复制的内容确认就可以了。 (如果找不到SSH密匙文件有两个办法:1. 下载GitHub桌面版就可以无需密匙 2. 下载一个小程序: everything 输入文件名字就可以查找)接着输入如图就成功配置完成了。 1ssh git@github.com 绑定SSH Key的目的是为了之后每次pull和push的时候不需要输入密码和账号,怪麻烦的。同时也避免一些可能产生的错误。 关于Git的基本使用请参考: Git的几个基本指令 下一步: 个人博客建设2-安装并配置Node.js以及Hexo目录: 用GitHub搭建个人博客(目录)","comments":true,"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"Image Classifier with Deep learning","date":"2020-01-19T21:25:00.000Z","path":"2020/01/19/Image Classifier with Deep learning/","text":"Image Classifier with Deep learningGoing forward, AI algorithms will be incorporated into more and more everyday applications. For example, you might want to include an image classifier in a smart phone app. To do this, you’d use a deep learning model trained on hundreds of thousands of images as part of the overall application architecture. A large part of software development in the future will be using these types of models as common parts of applications. In this project, you’ll train an image classifier to recognize different species of flowers. You can imagine using something like this in a phone app that tells you the name of the flower your camera is looking at. In practice you’d train this classifier, then export it for use in your application. We’ll be using this dataset of 102 flower categories, you can see a few examples below. The project is broken down into multiple steps: Load and preprocess the image dataset Train the image classifier on your dataset Use the trained classifier to predict image content We’ll lead you through each part which you’ll implement in Python. When you’ve completed this project, you’ll have an application that can be trained on any set of labeled images. Here your network will be learning about flowers and end up as a command line application. But, what you do with your new skills depends on your imagination and effort in building a dataset. For example, imagine an app where you take a picture of a car, it tells you what the make and model is, then looks up information about it. Go build your own dataset and make something new. First up is importing the packages you’ll need. It’s good practice to keep all the imports at the beginning of your code. As you work through this notebook and find you need to import a package, make sure to add the import up here. 12345678910111213# Imports hereimport matplotlib.pyplot as pltimport torchfrom torchvision import datasets, transforms, modelsimport helperfrom collections import OrderedDictimport jsonimport numpy as npimport timefrom torch import nnfrom torch import optimimport seaborn as snsfrom PIL import Image Load the dataHere you’ll use torchvision to load the data (documentation). The data should be included alongside this notebook, otherwise you can download it here. The dataset is split into three parts, training, validation, and testing. For the training, you’ll want to apply transformations such as random scaling, cropping, and flipping. This will help the network generalize leading to better performance. You’ll also need to make sure the input data is resized to 224x224 pixels as required by the pre-trained networks. The validation and testing sets are used to measure the model’s performance on data it hasn’t seen yet. For this you don’t want any scaling or rotation transformations, but you’ll need to resize then crop the images to the appropriate size. The pre-trained networks you’ll use were trained on the ImageNet dataset where each color channel was normalized separately. For all three sets you’ll need to normalize the means and standard deviations of the images to what the network expects. For the means, it’s [0.485, 0.456, 0.406] and for the standard deviations [0.229, 0.224, 0.225], calculated from the ImageNet images. These values will shift each color channel to be centered at 0 and range from -1 to 1. 1234data_dir = 'flowers'train_dir = data_dir + '/train'valid_dir = data_dir + '/valid'test_dir = data_dir + '/test' 1234567891011121314151617181920212223242526272829303132# TODO: Define your transforms for the training, validation, and testing setstrain_transforms = transforms.Compose([transforms.RandomRotation(30), transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) valid_transforms = transforms.Compose([transforms.Resize(255), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])test_transforms = transforms.Compose([transforms.Resize(255), transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])# TODO: Load the datasets with ImageFoldertrain_data = datasets.ImageFolder(train_dir, transform=train_transforms)valid_data = datasets.ImageFolder(valid_dir, transform=valid_transforms)test_data = datasets.ImageFolder(test_dir, transform=test_transforms)# TODO: Using the image datasets and the trainforms, define the dataloaderstrainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)validloader = torch.utils.data.DataLoader(valid_data, batch_size=64)testloader = torch.utils.data.DataLoader(test_data, batch_size=64)image_datasets = [train_data, valid_data, test_data]dataloaders = [trainloader, validloader, testloader] Label mappingYou’ll also need to load in a mapping from category label to category name. You can find this in the file cat_to_name.json. It’s a JSON object which you can read in with the json module. This will give you a dictionary mapping the integer encoded categories to the actual names of the flowers. 1234with open('cat_to_name.json', 'r') as f: cat_to_name = json.load(f) Building and training the classifierNow that the data is ready, it’s time to build and train the classifier. As usual, you should use one of the pretrained models from torchvision.models to get the image features. Build and train a new feed-forward classifier using those features. We’re going to leave this part up to you. Refer to the rubric for guidance on successfully completing this section. Things you’ll need to do: Load a pre-trained network (If you need a starting point, the VGG networks work great and are straightforward to use) Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout Train the classifier layers using backpropagation using the pre-trained network to get the features Track the loss and accuracy on the validation set to determine the best hyperparameters We’ve left a cell open for you below, but use as many as you need. Our advice is to break the problem up into smaller parts you can run separately. Check that each part is doing what you expect, then move on to the next. You’ll likely find that as you work through each part, you’ll need to go back and modify your previous code. This is totally normal! When training make sure you’re updating only the weights of the feed-forward network. You should be able to get the validation accuracy above 70% if you build everything right. Make sure to try different hyperparameters (learning rate, units in the classifier, epochs, etc) to find the best model. Save those hyperparameters to use as default values in the next part of the project. One last important tip if you’re using the workspace to run your code: To avoid having your workspace disconnect during the long-running tasks in this notebook, please read in the earlier page in this lesson called Intro toGPU Workspaces about Keeping Your Session Active. You’ll want to include code from the workspace_utils.py module. Note for Workspace users: If your network is over 1 GB when saved as a checkpoint, there might be issues with saving backups in your workspace. Typically this happens with wide dense layers after the convolutional layers. If your saved checkpoint is larger than 1 GB (you can open a terminal and check with ls -lh), you should reduce the size of your hidden layers and train again. 1234567891011121314151617181920device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")# TODO: Build and train your networkmodel = models.vgg19(pretrained=True)# Freeze parameters so we don't backprop through themfor param in model.parameters(): param.requires_grad = False model.classifier = nn.Sequential(nn.Linear(25088, 2048), nn.ReLU(), nn.Dropout(0.25), nn.Linear(2048, 102), nn.LogSoftmax(dim=1))criterion = nn.NLLLoss()# Only train the classifier parameters, feature parameters are frozenoptimizer = optim.Adam(model.classifier.parameters(), lr=0.001)model VGG( (features): Sequential( (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (1): ReLU(inplace=True) (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (3): ReLU(inplace=True) (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (6): ReLU(inplace=True) (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (8): ReLU(inplace=True) (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (11): ReLU(inplace=True) (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (13): ReLU(inplace=True) (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (15): ReLU(inplace=True) (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (17): ReLU(inplace=True) (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (20): ReLU(inplace=True) (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (22): ReLU(inplace=True) (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (24): ReLU(inplace=True) (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (26): ReLU(inplace=True) (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (29): ReLU(inplace=True) (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (31): ReLU(inplace=True) (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (33): ReLU(inplace=True) (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (35): ReLU(inplace=True) (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) ) (avgpool): AdaptiveAvgPool2d(output_size=(7, 7)) (classifier): Sequential( (0): Linear(in_features=25088, out_features=2048, bias=True) (1): ReLU() (2): Dropout(p=0.25, inplace=False) (3): Linear(in_features=2048, out_features=102, bias=True) (4): LogSoftmax() ) )1model.to(device) 123456789101112131415161718192021222324252627282930313233343536373839404142434445epochs = 8steps = 0running_loss = 0print_every = 50start = time.time()for e in range(epochs): for inputs, labels in trainloader: steps += 1 inputs, labels = inputs.to(device), labels.to(device) optimizer.zero_grad() logps = model.forward(inputs) loss = criterion(logps, labels) loss.backward() optimizer.step() running_loss += loss.item() if steps % print_every == 0: test_loss = 0 accuracy = 0 model.eval() with torch.no_grad(): for inputs, labels in validloader: inputs, labels = inputs.to(device), labels.to(device) logps = model.forward(inputs) batch_loss = criterion(logps, labels) test_loss += batch_loss.item() # Calculate accuracy ps = torch.exp(logps) top_p, top_class = ps.topk(1, dim=1) equals = top_class == labels.view(*top_class.shape) accuracy += torch.mean(equals.type(torch.FloatTensor)).item() print(\"Epoch: &#123;&#125;/&#123;&#125;.. \".format(e+1, epochs), f\"Train loss: &#123;running_loss/print_every:.3f&#125;.. \" f\"Valid loss: &#123;test_loss/len(validloader):.3f&#125;.. \" f\"Valid accuracy: &#123;accuracy/len(validloader):.3f&#125;\") running_loss = 0 model.train()time_end = time.time() - startprint(\"\\nTotal time: &#123;:.0f&#125;m &#123;:.0f&#125;s\".format(time_end//60, time_end % 60)) Epoch: 1/8.. Train loss: 3.569.. Valid loss: 1.455.. Valid accuracy: 0.612 Epoch: 1/8.. Train loss: 1.689.. Valid loss: 0.859.. Valid accuracy: 0.768 Epoch: 2/8.. Train loss: 1.296.. Valid loss: 0.759.. Valid accuracy: 0.784 Epoch: 2/8.. Train loss: 1.181.. Valid loss: 0.720.. Valid accuracy: 0.800 Epoch: 3/8.. Train loss: 1.054.. Valid loss: 0.655.. Valid accuracy: 0.809 Epoch: 3/8.. Train loss: 1.020.. Valid loss: 0.517.. Valid accuracy: 0.839 Epoch: 4/8.. Train loss: 0.988.. Valid loss: 0.487.. Valid accuracy: 0.850 Epoch: 4/8.. Train loss: 0.932.. Valid loss: 0.596.. Valid accuracy: 0.832 Epoch: 5/8.. Train loss: 0.893.. Valid loss: 0.517.. Valid accuracy: 0.857 Epoch: 5/8.. Train loss: 0.854.. Valid loss: 0.493.. Valid accuracy: 0.870 Epoch: 6/8.. Train loss: 0.790.. Valid loss: 0.508.. Valid accuracy: 0.861 Epoch: 6/8.. Train loss: 0.806.. Valid loss: 0.491.. Valid accuracy: 0.873 Epoch: 7/8.. Train loss: 0.806.. Valid loss: 0.565.. Valid accuracy: 0.861 Epoch: 7/8.. Train loss: 0.825.. Valid loss: 0.449.. Valid accuracy: 0.887 Epoch: 8/8.. Train loss: 0.734.. Valid loss: 0.453.. Valid accuracy: 0.882 Epoch: 8/8.. Train loss: 0.773.. Valid loss: 0.539.. Valid accuracy: 0.860 Total time: 14m 39s12 Testing your networkIt’s good practice to test your trained network on test data, images the network has never seen either in training or validation. This will give you a good estimate for the model’s performance on completely new images. Run the test images through the network and measure the accuracy, the same way you did validation. You should be able to reach around 70% accuracy on the test set if the model has been trained well. 1234567891011121314151617# TODO: Do validation on the test setmodel.eval()accuracy = 0with torch.no_grad(): for inputs, labels in testloader: inputs, labels = inputs.to(device), labels.to(device) logps = model.forward(inputs) batch_loss = criterion(logps, labels) test_loss += batch_loss.item() # Calculate accuracy ps = torch.exp(logps) top_p, top_class = ps.topk(1, dim=1) equals = top_class == labels.view(*top_class.shape) accuracy += torch.mean(equals.type(torch.FloatTensor)).item()print(f\"Valid accuracy: &#123;accuracy/len(testloader):.3f&#125;\") Valid accuracy: 0.854Save the checkpointNow that your network is trained, save the model so you can load it later for making predictions. You probably want to save other things such as the mapping of classes to indices which you get from one of the image datasets: image_datasets[&#39;train&#39;].class_to_idx. You can attach this to the model as an attribute which makes inference easier later on. 123456789101112131415161718192021Remember that you&#39;ll want to completely rebuild the model later so you can use it for inference. Make sure to include any information you need in the checkpoint. If you want to load the model and keep training, you&#39;ll want to save the number of epochs as well as the optimizer state, &#96;optimizer.state_dict&#96;. You&#39;ll likely want to use this trained model in the next part of the project, so best to save it now.&#96;&#96;&#96;python# TODO: Save the checkpoint classifier &#x3D; nn.Sequential(nn.Linear(25088, 2048), nn.ReLU(), nn.Dropout(0.25), nn.Linear(2048, 102), nn.LogSoftmax(dim&#x3D;1))model.class_to_idx &#x3D; image_datasets[0].class_to_idxcheckpoint &#x3D; &#123;&#39;input_size&#39;: 25088, &#39;output_size&#39;: 102, &#39;classifier&#39; : classifier, &#39;arch&#39;: &#39;vgg19&#39;, &#39;optimizer&#39;: optimizer.state_dict(), &#39;state_dict&#39;: model.state_dict(), &#39;class_to_idx&#39;: model.class_to_idx&#125;torch.save(checkpoint, &#39;checkpoint.pth&#39;) Loading the checkpointAt this point it’s good to write a function that can load a checkpoint and rebuild the model. That way you can come back to this project and keep working on it without having to retrain the network. 123456789101112# TODO: Write a function that loads a checkpoint and rebuilds the modeldef load_checkpoint(filepath): checkpoints = torch.load(filepath) model = models.vgg19(pretrained=True) model.class_to_idx = checkpoints['class_to_idx'] model.classifier = checkpoints['classifier'] model.load_state_dict(checkpoints['state_dict']) optimizer.load_state_dict(checkpoints['optimizer']) return model 12model = load_checkpoint('checkpoint.pth')print(model) VGG( (features): Sequential( (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (1): ReLU(inplace=True) (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (3): ReLU(inplace=True) (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (6): ReLU(inplace=True) (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (8): ReLU(inplace=True) (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (11): ReLU(inplace=True) (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (13): ReLU(inplace=True) (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (15): ReLU(inplace=True) (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (17): ReLU(inplace=True) (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (20): ReLU(inplace=True) (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (22): ReLU(inplace=True) (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (24): ReLU(inplace=True) (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (26): ReLU(inplace=True) (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (29): ReLU(inplace=True) (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (31): ReLU(inplace=True) (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (33): ReLU(inplace=True) (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (35): ReLU(inplace=True) (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) ) (avgpool): AdaptiveAvgPool2d(output_size=(7, 7)) (classifier): Sequential( (0): Linear(in_features=25088, out_features=2048, bias=True) (1): ReLU() (2): Dropout(p=0.25, inplace=False) (3): Linear(in_features=2048, out_features=102, bias=True) (4): LogSoftmax() ) )12 Inference for classificationNow you’ll write a function to use a trained network for inference. That is, you’ll pass an image into the network and predict the class of the flower in the image. Write a function called predict that takes an image and a model, then returns the top $K$ most likely classes along with the probabilities. It should look like 12345probs, classes = predict(image_path, model)print(probs)print(classes)&gt; [ 0.01558163 0.01541934 0.01452626 0.01443549 0.01407339]&gt; ['70', '3', '45', '62', '55'] First you’ll need to handle processing the input image such that it can be used in your network. Image PreprocessingYou’ll want to use PIL to load the image (documentation). It’s best to write a function that preprocesses the image so it can be used as input for the model. This function should process the images in the same manner used for training. First, resize the images where the shortest side is 256 pixels, keeping the aspect ratio. This can be done with the thumbnail or resize methods. Then you’ll need to crop out the center 224x224 portion of the image. Color channels of images are typically encoded as integers 0-255, but the model expected floats 0-1. You’ll need to convert the values. It’s easiest with a Numpy array, which you can get from a PIL image like so np_image = np.array(pil_image). As before, the network expects the images to be normalized in a specific way. For the means, it’s [0.485, 0.456, 0.406] and for the standard deviations [0.229, 0.224, 0.225]. You’ll want to subtract the means from each color channel, then divide by the standard deviation. And finally, PyTorch expects the color channel to be the first dimension but it’s the third dimension in the PIL image and Numpy array. You can reorder dimensions using ndarray.transpose. The color channel needs to be first and retain the order of the other two dimensions. 12345678910111213# TODO: Process a PIL image for use in a PyTorch modeldef process_image(image): ''' Scales, crops, and normalizes a PIL image for a PyTorch model, returns an Numpy array ''' im = Image.open(image) im = im.resize((256,256)) transform = transforms.Compose([transforms.CenterCrop(224), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) im = transform(im) return im To check your work, the function below converts a PyTorch tensor and displays it in the notebook. If your process_image function works, running the output through this function should return the original image (except for the cropped out portions). 1234567891011121314151617181920def imshow(image, ax=None, title=None): \"\"\"Imshow for Tensor.\"\"\" if ax is None: fig, ax = plt.subplots() # PyTorch tensors assume the color channel is the first dimension # but matplotlib assumes is the third dimension image = image.numpy().transpose((1, 2, 0)) # Undo preprocessing mean = np.array([0.485, 0.456, 0.406]) std = np.array([0.229, 0.224, 0.225]) image = std * image + mean # Image needs to be clipped between 0 and 1 or it looks like noise when displayed image = np.clip(image, 0, 1) ax.imshow(image) return ax 1234# Show original picsimage_path = test_dir + '/17/image_03911.jpg'pic = Image.open(image_path)pic 123# Show processed picspic_process = process_image(image_path)imshow(pic_process) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ae83fbbf08&gt; Class PredictionOnce you can get images in the correct format, it’s time to write a function for making predictions with your model. A common practice is to predict the top 5 or so (usually called top-$K$) most probable classes. You’ll want to calculate the class probabilities then find the $K$ largest values. To get the top $K$ largest values in a tensor use x.topk(k). This method returns both the highest k probabilities and the indices of those probabilities corresponding to the classes. You need to convert from these indices to the actual class labels using class_to_idx which hopefully you added to the model or from an ImageFolder you used to load the data (see here). Make sure to invert the dictionary so you get a mapping from index to class as well. Again, this method should take a path to an image and a model checkpoint, then return the probabilities and classes. 12345probs, classes = predict(image_path, model)print(probs)print(classes)&gt; [ 0.01558163 0.01541934 0.01452626 0.01443549 0.01407339]&gt; ['70', '3', '45', '62', '55'] 123456789101112131415161718def predict(image_path, model, topk=5): ''' Predict the class (or classes) of an image using a trained deep learning model. ''' processed_image = process_image(image_path) processed_image.unsqueeze_(0) probs = torch.exp(model.forward(processed_image)) top_probs, top_index = probs.topk(topk) top_index = top_index[0].numpy() index = [] for i in range(len(model.class_to_idx.items())): index.append(list(model.class_to_idx.items())[i][0]) label = [] for i in range(5): label.append(index[top_index[i]]) return top_probs, label 12img_path = test_dir + '/17/image_03911.jpg'predict(img_path, model, topk=5) (tensor([[9.8274e-01, 1.6505e-02, 3.9908e-04, 1.0707e-04, 9.1983e-05]], grad_fn=&lt;TopkBackward&gt;), [&apos;17&apos;, &apos;100&apos;, &apos;18&apos;, &apos;34&apos;, &apos;92&apos;])Sanity CheckingNow that you can use a trained model for predictions, check to make sure it makes sense. Even if the testing accuracy is high, it’s always good to check that there aren’t obvious bugs. Use matplotlib to plot the probabilities for the top 5 classes as a bar graph, along with the input image. It should look like this: You can convert from the class integer encoding to actual flower names with the cat_to_name.json file (should have been loaded earlier in the notebook). To show a PyTorch tensor as an image, use the imshow function defined above. 123456# TODO: Display an image along with the top 5 classesprob, classes = predict(img_path, model)prob = prob[0].detach().numpy()labels = []for each in classes: labels.append(cat_to_name[each]) 12345678910plt.figure(figsize = (8,8))ax = plt.subplot(2,1,1)flower_num = img_path.split('/')[2] # find the index of the flowertitle= cat_to_name[flower_num] img = process_image(img_path)plt.title(title)imshow(img, ax)plt.subplot(2,1,2)sns.barplot(prob, y=labels)plt.show() 123456789101112131415# test a flower pic outside the datasetimg_path = 'C:\\\\Users\\\\jasonguo\\\\Desktop\\\\flowers_zwy\\\\11.JPG'prob, classes = predict(img_path, model)prob = prob[0].detach().numpy()labels = []for each in classes: labels.append(cat_to_name[each])plt.figure(figsize = (8,8))ax = plt.subplot(2,1,1)img = process_image(img_path)imshow(img, ax)plt.subplot(2,1,2)sns.barplot(prob, y=labels)plt.show()# wihch is exactly true","comments":true,"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"用GitHub搭建个人博客(目录)","date":"2020-01-19T17:13:35.000Z","path":"2020/01/19/用GitHub搭建个人博客/","text":"快速上手使用GitHub+Hexo建立博客,适合新手。环境:Windows本文是目录篇,包含了所有关于使用GitHub+Hexo建立博客的相关教程。会逐渐更新。。。 首先为什么使用GitHub+Hexo建立博客1. 优点1. 不需要服务器省钱省时间呀(主要原因)2. 适合新手以及对建站不熟悉的小白(本人)3. 有很多现成精美模板4. 无流量限制2. 缺点1.个性化空间小2.静态页面(虽然博客以及足矣)3.没有数据库,不适合大型网站,运行一次就要遍历所有网站内容 总之就是非常适合做个人博客就对了。完成这个博客项目你需要: 1.非常基础的Git知识,熟悉命令行(参照文末辅助资料) 2.喜欢折腾 3.耐心 目录 个人博客建设1-在GitHub创建一个仓库并配置Git 个人博客建设2-安装并配置Node.js以及Hexo 个人博客建设3-申请并绑定域名 个人博客建设4-主题配置 个人博客建设5-Markdown语法 个人博客建设6-图片的插入 个人博客建设7-主题的配置Next其他辅助资料 Git的几个基本指令","comments":true,"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}]